La experiencia del desarrollador de .NET MAUI generalmente implica crear una interfaz de usuario en XAML y luego agregar codigo subyacente que opera
en la interfaz de usuario. Pueden surgir problemas de mantenimiento complejos a medida que se modifican las aplicaciones y crecen en tamaño y alcance. 
Estos problemas incluyen al acoplamiento estrecho entre los controles de la interfaz de usuario y la logica empresarial, lo que aumenta el costo de realizar
modificaciones en la interfaz de usuario y la dificultad de realizar pruebas unitarias de dicho codigo.

El patron MVVM ayuda a separar claramente la logica de presentacion y de negocios de una aplicacion de su interfaz de usuario (UI). Mantener una separacion clara entre
la logica de la aplicacion y la UI ayuda a abordar numerosos problemas de desarrollo y hace que una aplicacion sea mas facil de probar, mantener y desarrollar. Tambien puede
mejorar significativamente las oportunidades de reutilizacion de codigo y permtite que los desarrolladores y los diseñadores de UI colaboren mas facilmente al desarrollar sus 
respectivas partes de una aplicacion.

--------------------------------

The .NET MAUI developer experience typically involves creating a user interface in XAML, and then adding code-behind that operates on the user interface. Complex maintenance issues
can arise as apps are modified and grow in size and scope. These issues include the tigt coupling between the UI controls and the buisness logic, wich increases the cost of making UI 
modifications, and the difficulty of unit testing such code.

The MVVM pattern helps cleanly separate an application's business and presentation logic from its user interface (UI). Maintaining a clean separation between application logic and the UI helps
address numerous development issues and makes and application easier to test, maintain, and envolve. It can also significantly improve code re-use opportunities and allows developers and UI designers
to collaborate more easily when developing their respective parts of an app.

------------------------

El patron MVVM

El patron MVVM consta de tres componentes principales: el modelo, la vista y el modelo de vista. Cada uno cumple uno cumple una funcion especifica.

Ademas de comprender las responsabilidades de cada componente, tambien es importante comprender como interactuan. En un nivel alto, la vista "conoce" el modelo de vista y el modelo de vista "conoce" el modelo,
pero el modelo no conoce el modelo de vista y el modelo de vista no conoce la vista. Por lo tanto, el modelo de vista aisla la vista del modelo y permite que el modelo evolucione independientemente de la vista.

Los beneficios de utilizar el patron MVVM son los siguientes:
*** Si una implementacion de modelo existente encapsula la logica empresarial existente, puede resultar dificil o riesgoso cambiarla. En este escenario, el modelo de vista actua como un adaptador para las clases del modelo
y evita que se realicen cambios importantes en el codigo del modelo.

*** Los desarrolladores pueden crear pruebas unitarias para el modelo de vista y el modelo sin utilizar la vista. Las pruebas unitarias para el modelo de vista pueden ejercer exactamente la misma funcionalidad que utiliza la vista.

*** La interfa de usuario de la aplicacion de puede rediseñar sin modificar el modelo de vista ni el codigo del modelo, siempre que la vista se implemente completamente en XAML o C#. Por lo tanto, en una nueva version de la vista deberia
funcionar con el modelo de vista existente.

*** Los diseñadores y desarrolladores pueden trabajar de forma independiente y simultanea en sus componentes durante el desarrollo. Los diseñadores pueden centrarse en la vista, mientras que los desarrolladores pueden trabajar en el modeo de vista
y los componentes del modelo.

La clave par ausar MVVM de manera efizaz radica en comprender como factorizar el codigo de la aplicacion en las clases correctas y como interactuan las clases.

--------------------------------------

The MVVM pattern

There are three core components in the MVVM pattern: the model, the view, and the view model. Each servers a distinct purpose. The diagram belows shows the relationships between the threen components.

In addition to understanding the responsabilities of each component, it's also imporntant to understand how they interact. At a high level, the view "knows about" the view model, and the view model "knows about" the mode, but the
model is unaware of the view model, and the view model is unaware of the view. Therefore, the view model isolates the view from the model, and allows the model to envolve independently of the view.

The benefits of using the MVVM pattern are as follows:

***If an existing model implementation encapsulates existing bsiness logic, it can be difficult or risky to change it. In this scenario, the view model acts as and adapter for the model classes and prevents you from making major changes to the model code.

***Developers can create unit tests for the view model and the model, without using the view. The unit test for the view model can exercise exactly the same functionality as used by the view.

***The app UI can be redesigned without touching the view model and model code, provided that the view is implemented entirely in XAML or C#. Therefore, a new version of the view should work with the existing view model.

***Designers and developers can work independently and concurrently on their components during development. Designers can focus on the view, while developers can work on the view model and model components.

The key to using MVVM effectively lies in understanding how to factor app code into the correct classes and how the classes interact.

View

The view is reponsible for defining the structure, layout, and appearance of what the user sees on screen. Ideally, each view is defined in XAML, with a limtied code-behind that does not contain business logic. However, in some cases,
the code-behind migth contain UI logic that implements visual behavior that is difficult to express in XAML, such as animations.

In a .NET MAUI application, a vieew is typically a ContentPage- derived or ContentView- derived class. However, views can also be represented by a data template, wich specifies the UI elements to be used to visually represent an object 
when it's displayed. A data template as a vview does not have any code-behind, and is designed to bind to a specific view model type.

***Avoid enabling and disabling UI elements in the code-behind.

Ensure that the view models are responsible fro defining logical state changes that affect some aspects of the view's display, such as wheter a command is avialbe, or an indication that an operation is pending. Therefore, enable and disable UI
elements by binding to view model properties, rather than enabling and sisabling them in code-behind.

There are several options for executing code on the view model in response to interactions on the view, such as a button click on item selection. If a control supports commands, the control's Command property can be data-bound to an ICommand property on the view
model. When the control's command is invoked, the code in the view model will be executed.In object in the view and can listen for either a command to be invoked or the event to be raised. In response, the behavior can then invoke an ICommand on the view model
or a method on the view model.

------------------------------

Vista

La vista es responsable de definir la estructura, el diseño y la apariencia de lo que el usuario ve en la pantalla. Lo ideal es que cada vista se defina en XAML, con un codigo subyacente limitado que no contiene logica empresarial. Sin embargo, en algunos casos,
el codigo subyacente puede contener logica de interfaz de usuario que implemente un comportamiento visual que es dificil de expresar en XAML, como animaciones.

En una aplicacion .NET MAUI, una vista es normalmente una clases ContentPage derivada o ContentView derivada de una vista. Sin embargo, las vistas tambien pueden representarse mediante una plantilla de datos,
que especifica los elementos de la interfaz de usuario que se utilizaran para representar visualmente un objecto cuando se muestre. Una plantilla de datos como vista no tiene ningun codigo subyacente y esta diseñada para vinculaese a un tipo de modelo de vista especifico.

***Eevite habilitar y deshabilitar elemetnos de la interfaz de usuario en el codigo subyacente.

Asegurese de que los modelos de vista sean responsables de definir los cambios de estado logicos que afectan algunos aspectos d ela visualizacion de la vista, como si un comando esta disponible o una indicacion de que una operacion esta pendiente. Por lo tanto, habilite y deshabilite
los elementos de la interfaz de usuario mediante la vinculacion a las propiedades del modelo de vista, en lugar de habilitarlos y deshabilitarlos en el codigo subyacente.

Existen varias opciones para ejecutar el codigo en el modelo de vista en respuesta a interacciones en la vista, como un clic en un boton o la seleccion de un elemento. Si un control admite comandos, la propiedad Command del control se puede vincular a una propiedad ICommand en el modelo de vista.
Cuando se invoca el comando del control, se ejecuta el codigo en el modelo de vista. Ademas de los comandos, los comportamientos se pueden adjuntar a un objeto en la vista y pueden escuchar si se invoca un comando o si genera un evento, el comportamietno puede invocar un ICommand en el modelo de vista o 
un metodo en el modelo de vista.

----------------------

ViewModel

The view model implements properties and commands to wich the view can data bind to, and notifies the view of any state changes trough change notification events. The properties and commands that the view model provides define the functionality to be offered by the UI, but the view determines how that
functionality is to be displayed.

****Keep the UI responsive with asynchronous operations.

Multi-platform apps should keep the UI thread unblocked to improve the user's perception of performance. Therefore, in the view model, use asyncrhonous methods for I/O operations and raise events to asyncrhonous notify views of property changes.

The view model is also responsible for coordinating the view's interactions with any model classes that are required. There typically a on-to many relationship between the view model and the model classes. The view model migth choose to expose model classes directly to them. In this case, 
the model classes will need to be designed to support data binding and change notification events.

Each view model provides data from a model in a form that the view can easily consume. Ti accinokish this, the view model sometimes performs data converison. Placing this data conversion in the view model is a good idea because it provides properties that the view can bind to. For exammple, 
the view model migth combine the values of two properties to make it easier to splay by the view.

*** Centralize data conversions in a conversion layer.

It's also possible to use converters as a separate data conversion layer that sits between the view model and the view. This can be necessary, for example, when data requires special formatting that the view model doesn't provide.

In order for the view model to participate in two-way data binding with the view, its properties must raise the PropertyChanged event. View model satisfy this requirement by implementing the INotifyPropertyChanged interface, and raising the PropertyCHanged event when a property is changed.

For collections, the view-friendly ObservableCollection<T> is provided. This collection implements collection changed notification, reileving the developer from having to implement the InotifyCollectionChanged interface on collections.

------------------------------------------

El modelo de vista implementa propiedades y comandos a los que la vista puede vincular datos y nitifica a la vista cualquier cambio de estado a traves de eventos de notificacion de cambios. Las propiedades y los comandos que proporciona el modelo de vista definen la funcionalidad que
ofrecera la interfaz de usuario, pero la vista determina como se mostrara esa funcionalidad.

*** Mantenga la interfaz de usuario responsiva con operaciones asincronicas.

Las aplicaciones multiplataforma deben mantener el hilo de la interfaz de usuario bloqueado para mejorar la percepcion del rendimiento del usuario. Por lo tantom en el modelo de vista, utilice metodos asincronicos para las operaciones de E/S y genere eventos para notificar asincronicamente
a las vistas sobre los cambios de propiedades.

El modelo de vista tambien es responsable de coordinar las interacciones de la vista con cualquier clase de modelo que sea necesaria. Normalmente, existe una relacion de uno a muchos entre el modeo de vista y las clases de modelo. El modelo de vista puede optar por exponer las clases de 
modelo directamente a la vista para que los controles de la vista puedan vincularse directamente a los datos de estas. En este caso, las clases de modelo deberan estar diseñadas para admitir la vinculacion de datos y los eventos de notificacion de cambios.

Cada modelo de vista proporciona datos de un modelo en un formato que la vista puede consumir facilmente. Para lograr esto, el modelo de vista a veces realizar una conversion de datos. Colocar esta conversion de datos en el modelo de vista es una buena idea porque proporciona propiedades a las
que la vista puede vincularse. Por ejemplo, el modelo de vista puede combinar los valores de dos propiedades para que sea mas facil de mostrar en la vista.

*** Centralice las conversiones de datos en una capa de conversion.

Tambien es posible utilizar convertidores como una capa de conversion de datos independiente que se ubica entre el modelo de vista y la vista. Esto puede ser necesario, por ejemplo, cuando los datos requieren un formato especial que el modelo de vista no proporciona.

Para que el modelo de vista participe en la vinculacion de datos bidireccional con la vista, sus propiedades deben generar el PorpertChanged evento. Los modelos de vista satisfacen este requisito implementando la INotifyPropertyChanged interfaz y generando el PropertyChanged evento cuando se modifica
una propiedad.

Para las colecciones, se proporciona una interfaz facil de usar ObservableCollection<T>. Esta coleccion implementa la notificacion de cambios en la coleccion, lo que evita que el desarrollador tenga que implementar la INotifyCollectionChanged interfaz en las colecciones.

-------------------

Model

Model classes are non-visual classes that encapsulate the app's data. Therefore, the model can be thougth of as representing the app's domain model, which usually includes a data model along with business and validation logic. Examples of model objects include data transfer objects (DTOs), Plain Old CLR (POCOs), 
and generated entity and proxy objects.

Model classes are typically used in conjunction with services or repositories that encapsulate data acces and caching.

-----------------------

Modelo

Las clases del modelo son clases no visuales que encapsulan los datos de la aplicacion. por lo tanto, se puede pensar que el modelo representa el modelo de dominio de la aplicacion, que generalmente incluye un modelo de datos junto con la logica empresarial y de validacion. Algunos ejemplos de objetos de modelo
incluyen objetos de transferencia de datos (DTO), objetos CLR simples (POCO) y objetos proxy y de entidad generados.

Las clases de modelo generalmente se utilizan junto con servicios o repositorios que encapsulan el acceso a los datos y el almacenamiento en cache.

-------------------------------

Connecting view models to views 

View models can be connected to views by using the data-binding capabilities of .NET MAUI. There are many approaches that can be used to construct views and view models and associate them a runtime. Theses approaches fall into two categories, 
know as view first composition, and view model first composition. Choosing between view first composition and view model first composition is an issue of preference and complexity. However, all approaches share the same aim, wich is for the view to have a view model assigned
to its BindingContext property.

With view first composition the app is conveptually composed of views that connect to the view models they depend on. The primery benefit of this approach is that it makes it easy to construct loosely coupled, unit testable apps because the view models have no dependence on the views 
themselves. It's also easy to understand the structure of the app by following its visual structure, rather than having to track code execution to understand how classes are created and associated. In addition, view first construction aligns with the Microsoft Maui's navigation system
that's responsible for constructing pages when navigation occurs, wich makes a view model first composition complex and misaligned with the platform.

With view model first composition, the app is conceptually composed of view models, with a service responsible for locating the view for a view model. View model first composition feels more natural to some developers, since the view creatin can be abstracted away, allowing them to focus on the logical non-UI structure of the app.
In addtion, it allows view models to be created by other view models. However, this approach is often complex, and it can become difficult to understand how the various parts of the app are created and associated.

***Keep view models and views independent.

The binding of views a property in a data source should be the view's principal dependency on its corresponding view view. Specifically, don't reference view types, such as Button and ListView, from view models. By following the principles outlined here, view models can be tested in isolation, therefore reducing the likelihood of
software defects by limiting scope.

--------------------------------------------

Conexion de modelos de vista a vistas

Los modelos de vista se pueden conectar a las vistas mediante las capacidades de enlace de datos de .NET MAUI. Existen muchos enfoques que se pueden utilizar para construir vistas y mdoelos de vista y asociarlos en tipo de ejecucion.
Estos enfoques se dividen en dos categorias , conocidas como composicion de vista primero y composicion de modelo de vista primero. Elegir entre composicion de vista primero y composicion de modelo de vista primero es una cuestrion
de preferencia y complejudad. Sin embargo, todos los enfoques comparten el mismo objetivo, que es que la vista tenga un modelo de vista asignado a su propiedad BindingContext.

Con la composicion de vista primero, la aplicacion se compone conceptualmente de vistas que se conectan a los modelos de vista de los que depeneden. El principal beneficio de este enfoque es que facilita la construccion de aplicaciones acopladas
de forma flexible y que se pueden probar en unidades, ya que los modelos de vista no dependen de las vistas en si. Tambien es facil comprender la estructura de la aplcacion siguiendo su estructura visual, en lugar de tener que rastrear la ejecucion del codigo
para comprender como se crean y asocian las clases. Ademas, la construccion de vista primero se alinea con el sistema de navegacion de Microsoft Maui, que es responsable de construir paginas cuando se produce la navegacion, lo que hace que la composicion de modelo de vista primero sea 
compleja y no este alineada con la plataforma.

Con la composicion del modelo de vista primero, la aplicacion se compone conceptualmente de modeos de vista, con un servicio responsable de ubicar la vista para un  modelo de vista. La composicion del modelo de vista primero resulta mas natural para algunos desarrolladores, ya que la creacion
de la vista se puede abstraer, lo que les permite centrarse en la estructura logica no relacionada con la interfaz de usuario dela aplicacion. Ademas, permite que otros modelos de vista creen modelos de vista. Sin embargo, este enfoque suele ser complejo y puede resultar dificil de comprender como se crean 
y asocian las distintas partes de la aplicacion.

***Mantenga los modelos de vista y las vistas independientes.

La vinculacion de vistas a una propiedad en una fuente de datos debe ser la dependencia principal de la vista en su modelo de vista correspondiente. En concreto, no haga referencia a tipos de vista, como Button y ListView, desde los modelos de vista. Si se siguen los principios que se describen aqui, 
los modelos de vista se pueden probar de forma aislada, lo que reduce la probabilidad de defectos de software al limitar el alcance.

-------------------------------

Creacion de un modelo de vista de forma declarativa

El enfoque mas simple es que la vista cree una instancia declarativa de su modelo de vista correspondiente en XAML. Cuando se construye la vista, tambien se construira el objeto de modelo de vista correspondiente. 
Cuando ContentPage se crea el, LoginViewModel se construye  automaticamente una instancia de el y se establece como la de la vista BindingContext.

Esta construccion declarativa y asignacion del modelo de vista por parte de la vista tiene ventaja de que es simple, pero tiene la desventaja de que requiere un costructor predeterminado (sin parametros) en el modelo de vista.

----------------------

Creating a view model declaratively

The simplest approach is for the view to declaratively instantiate its corresponding view model in XAML. When the view is constructed, the corresponding view model object will also be constructed. 

When the ContentPage is created, an instance of the LoginViewModel is automatically constructed and set as the view's BindingContext.

This clarative construction and assignment of the view model by the view has the advantage that is's simple, but has the disadvantage that it requires a default (parameter-less) constructor in the view model.
-----------------------------------

Creacion de un modelo de vista mediante programacion

Una vista puede tener codigo en el archivo de codigo subyacente, lo que hace que el modelo de vista se asigne a su BindingContext propiedad. Esto suele lograrse en el constructor de la vista.

La construccion y asignacion programatica del modelo de vista dentro del codigo subyacente de la vista tiene la ventaja de ser simple, sin embargo, la principal desventaja de este enfoque es que la vista debe proporcionar
al modelo de vista todas las dependencias necesarias. El usu de un contenedor de inyeccion de dependencias puede ayudar a mantener un acoplamiento flexible entre la vista y el modelo de vista.

-------------------------

Creating view model programmatically 

A viewn can have code in the code-behind file, resulting in the view-model being assigned to its BindingContext properpty.

The programmatic construction and assignment of the view model within the view's code-behind has the advantage that it's simple. However, the main disadvantage of this approach is that the view needs to provide the view model with any 
required dependencies. Using a dependency injection containter can help to maintain loose coupling between the view and view model.

Updating views in response to changes in the underlying view model or model

All view model and model classes that are accesible to a view should implement the INotifyPropertyChanged interface. Implementing this interface in a view model or model class allows the class to provide change notifications to any data-bound
controls in the view when the underlying property value changes.

App's should be architected for the correct use of property change notification, by meeting the following requirements:
 *** Always raising a PropertyChanged event if a public property's value changes. Do not assume that raising the PropertyChanged event can be ignored because of knowledge of how XAML binding occurs.
 *** Always raising a PropertyChanged event for any calculated properties whose values are used by other properties int he view model or model.
 *** Always raising the PropertyChanged event at the end of the method that makes a property change, or when the object is known to be in a safe state. Raising the event interrupts the operation by invoking the event's handlers synchronously. If 
this happens in the middle of an operation, it migth expose the object to callback functions when it is in an unsafe, partially updated state. In addition, it's possible for cascading changes to be triggered by PropertyCHanged events. Cascading changes 
generally require updates to be complete before the cascading change is safe to execute.
 *** Never raising a PropertyChanged event if the property does not change. This means that you must compare the old and new values before raising the PropertyChanged event.
 ***Never raising more than one PropertyChanged event with the same property name argument within a single synchronous invocation of a public method of a class. For example, given a NumberOfItems property whose backing store is the _numerOfItems field,
if a method increments _numerOfItems fifty times during the execution of a loop, it should only raise property change notification on the NumerOfItems property once, after the work is complete. For asynchronous methods, raise the ProertyChanged event for 
a given property name in each synchronous segment of an asynchronous continuation chain.

A simple way to provide this functionality would be to create an extension of the BindableObject class. 

.NET MAUI's BindableObject class implements the INotifyPropertyChanged method. The ExtendedBindableObject class provides the RaisePropertyChanged method to invoke property change notification, and in doing so uses the functionality provided by the BindaleObject class.

View model classes can then derive from the ExtendedBindableObject class. Therefore, each view model class uses the RaisePropertyChanged method in the ExtendedBindableObject class to provide property change notification. 

---------------------------

Actualizacion de vistas en respuesta a cambios en el modelo de vista subyacente o en el modelo

Todos los modelos de vista y clases de modelos a los que se puede acceder desde una vista deben implementar la interfaz INotifyPropertyChanged. La implementacion de esta interfaz es un modelo de vista o una clase de modelo que permite que la clase proporcione notificaciones
de cambios a cualquier control enlazado a datos en la vista cuando cambia el valor de la propiedad subyacente.

Las aplicaciones deben estar diseñadas para el uso correcto de la notificacion de cambio de propiedad, cumpliendo los siguientes requisitos:

 *** Siempre se genera un PropertyChanged evento si cambia el valor de una propiedad publica. No suponga que PropertyChanged se puiede ignorar la generacion del evento debido a que se conoce como se produce la vinculacion XAML.
 *** Siempre se genera un PropertyChanged evento para cualquier propiedad calculada cuyos valores sean utilizados por otras propiedades en el modelo de vista o modelo.
 *** Siempre se genera el PropertyChanged evento al final del metodo que realiza un cambio de propiedad o cuando se sabe que el objeto se encuentra en un estado seguro. Al generar el evento, se interrumpe la operacion invocando los controladores del evento de manera sincronica.
Si esto sucede en medio de una operacion,  podria exponer el objeto de funciones de devolucion de llamada cuando se encuentra en un estado no seguro y parcialmente actualizado. Ademas, es posible que los cambios en cascada se activen mediante PropertyChanged eventos. Los cambios en cascada
generalmente requieren que se completen las actualizaciones antes que sea seguro ejecutar el cambio en cascada.
 *** Nunca se debe generar el PropertyChanged evento durante el constructor de un modelo de vista si se esta inicializando una propiedad. Los controles enlazados a datos en la vista no se habran suscrito para recibir notificaciones de cambios en este punto.
 *** Nunca generar mas de un PropertyChanged evento con el mismo argumento de nombre de propiedad dentro de una unica invocacion sincronica de un metodo publico de una clase. Por ejemplo, dada una NumberOfItems propiedad cuyo almacen de respaldo es el _numberOfItems campo, si un metodo se incrementa
_numberOfItems cincuenta veces durante la ejecucion de un bucle, solo deberia generar una notificacion de cambio de propiedad en la NumerOfImtes propiedad una vez, despues de que se complete todo el trabajo. Para los metodos asincronicos, genere el PropertyChanged evento para un nombre de propiedad
determinado en cada segmento sincronico de una cadena de continuacion asincronica.

Una forma sencilla de proporcionar esta funcionalidad seria crear una extension de la BinableObject clase.

La clase .NET MAUI BindableObject implementa la INotifyPropertyChanged interfaz y proporciona un OnPropertyChanged metodo. La extendenBindableObject clase proporciona el RaisePropertyChanged metodo para invocar la notificaion de cambio de propiedad y, al hacerlo, utiliza la funcionalidad proporcionada
por la BindableObject clase.

Las clases del modelo de vista pueden derivarse de la ExtendenBindableObject clasae. Por lo tanto, cada clase del modelo de vista utiliza el RaisePropertyChanged metodo de la ExtendenBindableObject clase para proporcionar una notificacion de cambio de propiedad.

Marcos MVVM 

El patron MVVM esta bien establecido en .NET y la comunidad ha creado muchos marcos que ayudan a facilitar este desarrollo. Cada marco proporciona un conjunto diferente de caracteristicas, pero es estandar que proporcione un modelo de vista comun con una implementacion de la INotifyPropertyChanged interfaz. Las
caracteristicas adicionales de los amrcos MVVM incluyen comandos personalizados, asistentes de navegacion, componenetes de inyectcion de dependencias/localizador de servicios e integracion de la plataforma de UI. Si bien no es necesario utilizar estos marcos, pueden acelerar y estandarizar su desarrollo.

--------------------

MVVVM Frameworks

The MVVM pattern is well established in .NET, and the community has created many frameworks wich help ease this development. Each framework provides a different set of features, but it is standar for them to provide a common view model with an implementation of the INotifyPropertyChanged interface. Additional features
of MVVM frameworks include custom commands, navigation helpers, dependencty injection/service locator components, and UI platform integration. While it is not necessary to use these frameworks, thy can speed up and standardize your development.

UI interaction using commands and behaviors

In multi-platform  apps, actions are typically invoked in response to a user action, such as a button click, that can be implemented by creating an event handler in the code-behind file. However, in the MVVM patter, the responsability for implementing the action lies with the view model, and placing code in the code-behind should be avoided.

Commands provide a convenient way to represent actions that can be bound to controls in the UI. They encapsulate the code that implements the action and help to keep it decoupled from its visual representation in the view. This way, tour view models become more portable to new platforms, as they do not have a direct dependency on events provided by the
platform's UI framework. .NET MAUI includes controls that can be declaratively connected to a command, and these controls will invoke the command when the user interacts with the control.

Behaviors also allow controls to be declaratively connected to a command. However, behaviors can be used to invoke an action that's associated with a range of events raised by a control. Therefore, behaviors address many of the same scenarios as command-enabled controls, while providing a greater degree of flexibility and control. In addition, behabviors can 
also be used to associate command objects or methods with controls that were not specifically designed to interact with commands.

---------------------

Interaccion de la interfaz de usuario mediante comandos y comportamientos

En las aplicaciones multiplataforma, las acciones se suelen invocar en respuesta a una accion del usuario, como hacer clic en un boton, que se puede implementar mediante la creacion de un controlador de eventos en el archivo de codigo subyacente. Sin embargo, en el patron MVVM, la responsabilidad de implementar la accion reace en el modelo de vista y se debe evitar
colocar codigo en el codigo subyacente.

Los comadnos proporcionan una forma conveniente de representar acciones que se pueden vincular a controles en la interfaz de usuario. Encapsulan el codigo que implementa la accion y ayudan a mentelerlo desacoplado de su representacion visual en la vista. De esta manera, los modelos de vista se vuelven mas portatiles para las nuevas plataformas, ya que no tienen una dependencia
directa de los eventos proporcionados por el marco de interfaz de usuario de la plataforma. .NET MAUI incluye controles que se pueden conectar de manera declarativa a un comando, y estos controles invocaran el comando cuando el usuario interactue con el control.

Los comportatmientos tambien permiten que los controles se conecten de manera declarativa a un comando. Sin embargo, los comportameitnso se pueden utilizar para invocar una accion asociada con una serie de eventos generados por un control. Por lo tanto, los comportamientos abordan muchos de los mismos escenarios que los controles habilitados para comandos, al tiempo que brindan un mayor
grado de flexibilidad y control. Ademas, los comportamientos tambien se pueden utilizar para asociar objetos o metodos de comadnos con controles que no fueron diseñados especificamente para interactuar con comandos.
