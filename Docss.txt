Cuando visual studio crea un proyecto .NET MAUI, se generan cuatro archivos de codigo importantes. Estos se pueden ver
desde el panel "Explorador de soluciones" de visual stuido.

Etos archivos ayudan a configurar y ejecutar la aplicacion .NET MAUI. Cada archivo tiene una finalidad diferente:
 ***Programa Maui.cs
Este es un archivo de codigo que inicia la aplicacion. El codigo de este archivo sirve como punto de entrada multiplataforma
de la aplicacion, que configura e inicia la aplicacion. El codigo de inicio de la plantilla apunta a la App clase definida por el
archivo App.xaml.
 
  ***App.xaml y App.xaml.cs
Para simplificar, ambos archivos se denominan un solo archivo. Generalmente, hay dos archivos con cualquier archivo XAML:el archivo
.xaml en si y un archivo de codigo correspondiente que es un elemento secundario de este en el Explorador de soluciones. El archivo
.xaml contiene el marcado XAML y el archivo de codigo contiene el codigo creado por el usuario para interactuar con el marcado XAML.

El archivo App.xaml contiene recursos XAML para toda la aplicacion, como colores, estilos o plantillas. El archivo App.xaml.cs generalmente
contiene codigo que crea una instancia de la aplicacion Shell. 
  
   ***MainPage.xaml y MainPage.xaml.cs
Esta es la pagina de inicio que muestra la aplicacion. El archivo MainPage.xaml define la interfaz de usuario de la pagina. 
MainPage.xaml.cs contiene el codigo subyacente para el XAML, como el codigo para un evento de clic de boton.

----

When visual stuido creates a .NET MAUI project, four important code files are generated. These can be seen in the solution Explorer 
pane of visual studi.

These files help get the .NET MAUI app configured and running. Each file servers a different pupose, described below:

 *** MauiProgram.cs
This is a code file that bootstraps your app. The code in this file servers as the cross-platform entry point of the app, wich configures 
and starts the app. The template startup code points to the App class defined by the App.xaml file.

 *** App.xaml and App.xaml.cs
Just to keep things simple, noth of these files are referred to as a single file. There are generally two files with any XAML file, the 
.xaml file itself, and a corresponding code file that is a child item of it in the Solution Explorer. The .xaml file contains XAML markup 
interact with the XAML markup.

The App.xaml file contains app-wide XAML resources, such as colors, styles, or templates. The App.xaml.cs file generally contains code that 
instantiates the Shell application. In this project, it points to the AppShell class.

  *** AppShell.xaml and AppShell.xaml.cs
This file defines the AppShell class, which is used to define visual hierachy of the app.
 
  *** MainPage.xaml and MainPage.xaml.cs
This is the startup page displayed by the app. The MainPage.xaml file defines the UI (user interface) of the page. MainPage.xaml.cs contains the 
code-behind for the XAML, like code for a button click event.

--------------------------------------------------------

<ContentPage> es el objeto raiz de la AboutPage clase.

<VerticalStackLayout> es el unico objeto secundario de ContentPage. ContentPage solo puede tener un objeto secundario. El tipo VerticalStackLayout
puede tener varios objetos secundarios. Este control de diserño organiza sus objetos secundarios verticalmente, uno tras otro.

<HorizontalStackLayout> funciona igual que <VerticalStackLayout>, excepto que sus hijos estan dispuestos horizontalmente.

<Image> muestra una imagen, en este caso se utiliza la dotnet_bot.png imagen que viene con cada proyecto .NET MAUI.

**IMPORTANTE**
El archivo agregado al proyecto es en realidad botnet_bot.svg .NET MAUI convierte archivos de graficos vectoriales escalabrles (SVG) en archivos de graficos 
de red portatiles (PNG) segun el dispositivo de destino. Por lo tanto, al agregar un archivo SVG a su proyecto de aplicacion .NET MAUI, se debe hacer referencia
a el desde XAML o C# con una .png extension. La unica referencia al archivos SVG debe estar en su archivo de proyecto.

<Label> Los controles muestran el texto.

<Button> El usuario puede presionar los controles para generar el Clicked evento. Puede ejecutar codigo en respuesta al Clicked evento.

**Clicked = "LearMore_Clicked"
 El clicked evento del boton se asigna al LearnMore_Clicked controlador de eventos, que se definira en el archivo de codigo subyacente.

-------------------

<ContentPage> Is the root object for the AboutPage class.

<VerticalStackLayout> Is the only child object of the ContentPage. ContentPage can only have one child object. The VerticalStackLayout type 
can have multiple children. This layout control arranges its children vertically, one after the other.

<HorizontalStackLayout> Operates the same as <VerticalStackLayout>, except its children are arrenger horizontally.

<Image> Displays an image, in this chase it's using the dotnet_bot.png image that comes with every .NET MAUI project.

***IMPORTANT***
 The file added to the project is actually dotnet_bot.svg. .NET MAUI converts Scalable Vector Graphics (SVG) files to Portable Network 
Graphic (PNG) files based on the target device. Therefore, when adding an SVG file to your .NET MAUI app project, it should 
be referenced from XAML or C# with a .png extension. The only reference to the SVG file should be in your project file.

<Label> Controls display text.

<Button> Controls can be pressed by the user, which raise the Clicked event. You can run code in response to the Clicked event.

**Clicked="LearnMore_Clicked"
 The clicked event of the button is assigned to the LearMore_Clicked event handler, which will be defined in the code-behind file.

-------------------------

<Shell> es el objeto raiz del marcado XAML.

<TabBar> es el contenido del Shell.

 Dos <ShellContent> objetos dentro del <TabBar>. Antes de reemplazar el codigo de la plantilla, habia un solo <ShellContent>
objeto que apuntaba a la MainPage pagina.

Los TabBar y sus hijos no representan ningun elemento de la interfaz de usuario, sino la organizacion de la jerarquia visual de la 
aplicacion. Shell toma estos objetos y produce la interfaz de usuario para el contenido, con una barra en la parte superior que representa
cada pagina. La ShellContent.Icon propiedad de cada pagina utiliza una sintaxis especial:{Onplatform...}. Esta sintaxis se procesa cuando
se compilan las paginas XAML para cada plataforma y con ella se puede especificar un valor de propiedad para cada plataforma. En este caso, 
cada plataforma utiliza el icon_about.png icono de forma predeterminada, pero iOs y MacCatalyst utilizaran icon_about_ios.png.

Cada <ShellContent> objeto apunta a una pagina para mostrar. Esto se establece mediante la ContentTemplate propiedad.

----------------------------

<Shell> is the root object of the XAML markup.

<TabBar> is the content of the Shell.

 Two <ShellContent> objects inside of the <TabBar>. Before you replaced the temmplate code, thewe was a single <ShellContent> object, pointing 
to the MainPage page.

The TabBar and its children don't represent any user interface elements, but rather the organization of the app's visual hierarchy. Shell takes
these objects and produces the user interface for the content, with a bar at the top representing each page. The ShellContentIcon property for each page 
uses special syntax:{OnPlatform...}. This sintax is processed when the XAML pages are compiled for each platform, and with it you can specify a property 
value for each platform. In this case, every platform uses icon_about.png icon by default, but iOS and MacCatalyst will use icon_about_ios.png.

Each <ShellContent> object is poiting to a page to display.


--------------

<VerticalStackLayout> organiza sus controles secundarios verticalmente, uno debajo del otro.

<Editor> es un control de editor de texto de varias lineas y el primer control dentro de VerticalStackLayout.

<Grid> es un control de diseño y es el segundo control dentro de VerticalStackLayout.
Este control define columnas y flas para crear celdas. Los controles secundarios se colocan dentro de esas celdas.

De forma predeterminada, el control Grid contiene una sola fila y columna, lo que crea una sola celda. Las columnas
se defienen con un ancho, y el * valor de ancho indica a la columna que debe llenar la mayor cantidad de espacio posible.
El fragmento anterior definio dos columnas, ambas utilizando la mayor cantidad de espacio posible. El fragmento anteior
definio dos columnas, ambas utilizando la mayor cantidad de espacio posible, lo que distriubuye uniformemente las columnas
en el espacio asignado: ColumnDefinitios="*,*. Los tamaños de columnas estan separados por un , caracter.

Las columnas y filas definidas por una cuadricula se indexan a partir de 0, Por lo tanto, la primera columna seria el indice 0, 
la segunda columna seria el indice 1, y asi sucesivamente.

Hay dos <Button> controles dentro <Grid> y se les asginla una columna. Si un control secundario no define una asignacion de
columna, se le asigna autimaticamente a la primera columna. En este marcado, el primer boton es el boton "Guardar" y se asigna
automaticamente a la primera columna, la columna 0. El segundo boton es el boton "Eliminar" y se asigna a la segunda columna, la columna 1.

----------------------------

<VerticalStackLayout> arranges its children controls vertically, one below the other.

<Editor> is a multi-line text editor control, and is the first control inside of VerticalStackLayout.

<Grid> is a layout control, and is the second control inside of VerticalStackLayuot.

This control defines columns ands rows to create cells. Child controls are placen within those cells.

By default, the Grid control contains a single row and column, creating a single cell. Columns are defined with
a width, and the * value for width tells the column to fill up as much space as possible. The previus snippet defined two 
columns, both using as much space as possible, which evenly distributes the columns in the alloted space: ColumnnDefinitions="*,*". The
column sizes are separated by a , character.

Columns and rows defined by a Grid are indexed starting at 0. So the first column would be index 0, the second columns is index 1, and o on.

Two <button> controls are inside the <Grid> and assigned a column. If a child control doesn´t define a column 
assignment . It's automatically assigned to the first column. In this markup, the first button is the "Save" button and automatically assigned
to the first column, column 0. The second button is the "Delete" button and assigned to the second column, column 1.

------------------------------------------

Cuando agrega un nuevo archivo XAML, el codigo subyacente contiene una sola linea en el constructor, una llamada al InitializeComponent metodo:

El initializeComponent metodo lee el codigo XAML e inicializa todos los objetos definidos por el codigo. Los objetos estan conectados en sus relaciones
padre-hijo, y los controladores de eventos definidos en el codigo se adjuntan a los eventos establecidos en el codigo XAML.

-----------

When you add a new XAML file, the code-behing contains a single line in the constructor, a call to the InitializeComponent method:
The InitializeComponent method reads the XAML markup and initializes all of the objects defined by the markup. The objects are connected
in their parent-child relationships, and the event handlers defined in code are attached to events set in the XAML.

----------------
private void SaveButton_Clicked(object sender, EventArgs e)
{
    // Save the file.
    File.WriteAllText(_fileName, TextEditor.Text);
}

El SaveButtonClicked escribe el texto en el control Editor, en el archivo representado por la _filename varibale.

El DeleteButton_Clicked primero verifica si el archivo representado por la _fileName variable existe y, si existe, lo elimina.
A continuacion, se borra el texto del control Editor.

-----------

The SaveButton_Clicked method writes the text in the Editor control, to the file represented by the _fileName variable.

The DeleteButton_Clicked method first checks if the file represented by the _fileName variable, and if it exist, deletes it.
Next, the Editor control's text is cleared.

------------------------------------------------

Vincular datos a la interfaz de usuario y navegar por las paginas 

En los pasos anteriores del tutorial, agrego dos paginas al proyecto:NotePage y AboutPage. Las paginas representan
una vista de datos. La NotePage es una "vista" de muestra de "datos de notas" y la AboutPage es una "vista" que muestra
"datos de informacion de la aplicacion. Ambas vistas tienen un modelo de esos datos codificado o incrustado en ellas, y debera 
separar el modelo de datos de la vista.

¿Cual es el beneficio de separar el modelo de la vista?
Permite diseñar la vista para representar e interactuar con cualquier parte del modelo sin preocuparse por el codigo real
que implementa el modelo. Esto se logra mediante el enlace de datos.

-------------------

Bind data to the UI and navigate pages

In the previous steps of the tutorial, you added two pages to the project: NotePage and AboutPage. The pages represent a view 
of data. The NotePages is a "view" that displays "note data" and the AboutPage is a "view" that displays "app information data".
Both of theses views have a model of that data hardcoded, or embebbed in them, and you'll need to separate the data model from 
the view.

What is the benefit of separating the model from the view?
It allows tou to desing the view to represent and interact with ant portion of the model without worrying about the actual code 
that implements the mode. This is accomplished using data binding, something that will be presented later in this tutorial. For now,
though, lets restructure the project.

-------------------------------

* xmlns:models="clr-namespace:Notes.Models"

Esta linea asigna el Note.Models espacio de nombres .NET al models espacio de nombres XML.

* La bindingContext propiedad de ContentPage se establece en una instancia de la Note.Models.About clase, utilizando el espacio
de nombres XML y el objeto de models:About. Esto se establecio utilizando la sintaxis de elemento de propiedad en lugar de un 
atributo XML.

****IMPORTANTE***
Hasta ahora, las propiedades se han establecido mediante un atributo XML. Esto funciona muy bien para valores simples como una
Label.Fontysize propiedad. Pero si el valor de la propiedad es mas complejo, debe utilizar la sintaxis de elemento de propiedad
para crear el objeto. Considere el siguiente ejemplo de creacion de una etiqueta con su FontSize propiedad establecida:
  <Label FontSize="22" />
La misma FontSize propiedad se puede configurar utilizando la sintaxis del elemento de propiedad:
  <Label>
    <Label.FontSize>
        22
    </Label.FontSize>
</Label>

*Se modificio el valor de propiedad de tres <Label> controles Text de una cadena codificada a una sintaxis de enlace {Binding PATH}.

{Binging} La sintaxis se procesa en tiempo de ejecucion, lo que permite que el valor devuelto desde el enlace sea dinamico. La PATH
parte de {Binding PATH} es la ruta de la propiedad a la que se enlazara. La propiedad proviene del control actual BindingContext. Con
el <Label> control, BindingContext no esta definido. El contexto se hereda del padre cuando el control lo desconfigura, que en este caso,
el contexto de la configuracion del objeto padre es el objeto raiz: ContentPage.

El objeto final en la pagina Acerca de es actualizar el boton que se abre con un clic en una pagina web. La URL se incluyo en el codigo subyacente,
pero deveria provenir del modelo que se encuentra en la BindigContext propiedad.

-------------------

*xmlns:models="clr-namespace:Notes.Models"

This line maps the Notes.Models .NET namespace to the models XML namespace.

The bindingContext property of the ContentPage is set to an instance of the Note.Models.About class, using the XML namespace and object of
models:About. This was set using property elements syntax instead of an XML attribute.

***IMPORTANT***
Until now, properties have been set using an XML attribute. This works great for simple values, such as a Label.FontSize property. But if the 
property value is more complex, you must use property elements syntax to create the object. Consider the following example of a creating a label 
with its FontSize property  set:
 
  <Label FontSize="22" />

The same FontSize property can be set using property element syntax:
  <Label>
    <Label.FontSize>
        22
    </Label.FontSize>
</Label>

*Three <Label> controls had their Text property valye changed from a hardcoded string to binding syntax: {Bindig PATH}.

{Binding} syntax is processed at run-time, allowing the value returned from the binding to be dynamic. The PATH portion 
of {Binding PATH} is the property path to bind to. The property comes from the current control's BindingContext. With the
<Label> control, BindingContext is unset. Context is inherited from the parent when it's unset by the control, which in 
this case, the parent object setting context is the root object: ContetPage.

The object in the BindingContext is an instance of the About model. The binding path of one of the labels binds the Label.Text
property to the About.Title property.

------------------------------

Codifucar el modelo AllNotes
El nuevo modelo representara los datos necesarios para mostrar varias notas. Estos datos seran una propiedad que representa una coleccion
de notas. La coleccion sera una ObservableCollection que es una coleccion especializada. Cuando un control que enumera varios elementos, 
como un ListView, esta vinculado a un ObservableCollection, los dos trabajan juntos para mantener automaticamente la lista de elementos 
sincronizada con la coleccion. Si la lista agrega un elemento, la coleccion se actualiza. Si la coleccion agrega un nuevo control, se actualiza
automaticamente un nuevo elemento.

---------------

Code the AllNotes model
The new model will represent the data required to display multiple notes. This data will be a property that represents a collection of notes. The
collection will be an ObservableCollection which is a  specialized collection. When a control which list multiple items, such as a ListView, is 
bound to an ObservableCollection, the two work together to automatically keep the list of items is sync with the collection. If the list adds and item,
the control is automatically updated with a new item.

-------------------------

* La ContentPage.ToolbarItems propiedad contiene un ToolbarItem. Los botones definidos aqui suelen aparecer en la parte superior de la aplicacion, junto
al titulo de la pagina. Sin embargo, segun la plataforma, puede estar en una posicion diferente. Cuando se presiona uno de estos botones, Clocked
se genera el evento, como un boton normal.

*La ToolBarItem.IconImageSource propiedad establece el icodo que se mostrara en el boton. El icono puede ser cualquier recurso de imagen definido por el 
proyecto.

*El control CollectionView muestra una coleccion de elementos y, en este caso, esta vinculado a la propiedad del modelo Notes. La forma en que la vista
de coleccion presenta cada elemento se establece mediante las propiedades CollectionView.ItemsLayout y CollectionView.ItemTemplate.

Para cada elemento de la coleccion, CollectionView.ItemTemplate genera el XAML declarado. El XAML de ese XAML se convierte en el elemto de la coleccion en si, 
en este caso cada nota individual. La plantilla para la nota utiliza dos etiquetas, que estan vinculadas a la propiedades y BindingContext de la note .Text.Date.

*CollectionView maneja el evento que se genera cuando se selecciona un elemento en la vista de coleccion .SelectionChanged.


-------------------

*The ContentPage.ToolbarItems property contains a ToolbarItem. The buttons defined here are usually display at the top of the app, along the page title. Depending
on the platform, though, it may be in a different position. When one of these buttons is pressed, the Clicked event is raised, just like a normal button.

* The ToolbarItem.IconImageSource property sets the icon to display on the button. The icon can be any image resource defined by the project, however, in this example,
a FontImage is used.

*The CollectionView control displays a collection of items, and in this case, is bound to the model's Notes property. The way each item is presented by the collection
view is set through the CollectionView.itemsLayout and CollectionView.ItemTemplate properties.

For each item in the collection, the CollectionView.ItemTemplate generates the declared XAML. The BindingContext of that XAML becomes the collection item itself, in this
case, each individual note. The template for the note uses two labels, which are bound to the note's Text and Date properties.

*The CollectionView handles the SelectionChanged event, which is raised when an item in the collection view is selected.


-----------------

El OnAppearing metodo se reemplaza desde la clase base, Este metodo se llama automaticamente cada vez que se muestra la pagina, como cuando
se navega a la pagina. El codigo aqui le indica al modelo que cargue las notas. Debido a que CollectionView en la vista AllNotes esta vinculada a la propiedad del 
modelo AllNotes Notes, que es una ObservableCollection, cada vez que se cargan las notas, CollectionView se actualiza automaticamente.

El Add_Clicked controlador presenta otro concepto nuevo: la navegacion. Como la aplicacion utiliza .NET MAUI shell, puedes navegar a las paginas llamando al Shell.Current.GoToAsync
metodo. Observa que el controlador se declara con la palabra clave async, lo que permite el uso de la palabra clave await al navegar. Este controlador navega a la NotePage.

El ultima fragmento de codigo del fragmento anterior es el notesCollection_SelectionChanged controlador. Este metodo toma el elemento seleccionado actualmente, un modelo de nota NotePage,
y utiliza su informacion para navegar hasta el archivo. GoToAsync utiliza una cadena URI para la navegacion. En este caso, se construye una cadena que utiliza un parametro de cadena de consulta 
para establecer una propiedad en la pagina de destino. La cadena interpolada que representa la URL termina luciando similar a la siguiente cadena:
    NotePage?ItemId=path\on\device\XYZ.notes.txt

El ItemId=parametro se establece en el nombre del archivo en el dispositivo donde esta almacenada la nota.

-----------------------------

The OnAppearing method is overridden from the base class. This method is automatically called whenever the page is shwon, such as when the page is navigated to. The code here tells the model to load
the notes. Because the CollectionView in the AllNotes view is bound to the AllNotes model's Notes property, which is an ObservableCollection, whenever the notes are loaded, the CollectionView is 
automatically updated.

The Add_Clicked handler introduces another new concept, navigation. Because the app is using .NET MAUI Shell, you can navigate to pages by calling the Shell.Current.GoToAsync  method. Notice that the handler
is declared with the async keyword, which allows the use of the await keyword when navigating. This handler navigates to the NotePage.

The last piece of code in the previous snippet is the notesCollection_SelectyionChanged handler. This method takes the  currently selected item, a Note model, and uses its information to navigate to the NotePage.
GoToAsync uses a URL string for navigation. In this case, a string is contructed that uses a query string parameter to set a property on the destination page. The inerpolated string representing the URl ends up 
looking similar to the following string:
   
          NotePage?ItemId=path\on\device\XYZ.notes.txt

The ItemId=parameter is set to the file name of the device where the note is stored.

----------

El Routing.RegisterRoute metodo toma dos parametros:
 *El primer parametro es el nombre de la cadena de la URL que desea registrar, en este caso el nombre resuelto es "NotePage".
 *El segundo parametro es el tipo de pagian que se cargara cuando "NotePage" se navegue a ella.


-------

The Routing.RegisterRoute methed takes two parameters:
 *The first parameter is the string name of the URL you want to register, in this case the resolved name is "NotePage".
 *The second parameter is the type of apge to lad when "NotePage" is navigated to.