Entender MVVM

La experiencia del desarrollador de .NET MAUI generalmente implica crear una interfaz de usuario en XAML y luego
agregar codigo subyacente que opera en la interfaz de usuario. Pueden surgir problemas de mantenimiento complejos a medida
que las aplicaciones se modifican y crecenen tamaño y alcance. Estos problemas incluyen el acoplamiento estrecho entre
los controles de la interfaz de usuariio y la logica empresarial, lo que aumenta el costo de realiar modificaciones en la interfaz
de usuario y la dificultad de realizar pruebas unitarias de dicho codigo.

El patron modelo-vista-modelo-vista (MVVM) ayuda a separar claramente la logia de presentacion y de negocios de una aplicacion de su
interfaz  de usuario (UI). Mantener una separacion clara entre la logica de la aplicacion y la UI ayuda a abordar numerosos problemas de
desarrollo y hace que una aplicacion sea mas facil de probar, mantener y desarrollar. Tambien puede mejorar significativamente las oportunidades
de reuitilizacion de codigo y permite que los desarrolladores y los diseñadores de UI colaboren mas facilmente al desarrollar sus 
respectivas partes de una aplicacion.

-------------

Understand MVVM

The .NET MAUI developer experience typically involves creating a user interface in XAML, and the adding code-behind that operates  on the
user interface. Complex maintenance issues can arise as apps are modified and grow in size and scope. Theses issues include the tigth coupling 
between the UI controls and the buisness logic, which increases the cost of making UI modifications, and the difficulty of unit testing souch code.

The model-view-viewmodel(MVVM) pattern helps cleanly separate an app's buisness and presentation logic from its user interface (UI). Maintaining a
clean separation between app logic and the UI helps address numerous development issues and makes an app easier to test, maintain, and evolve. It can
also significantly improve code reuse opportunities and allows developers and UI designers to collaborate more easily when developing their respective
parts of an app.

-----------------

El patron

El patron MVVM consta de tres componentes principales: el modelo, la vista y el modelo de vista. Cada uno de ellos cumple una funcion especifica.
El siguiente diagrama muestra las relaciones entre los componentes:
   VIEW----->VIEW MODEL-------------->MODEL

Ademas de comprender las responsabilidades de cada componente, tambien es importante comprender como interactuan. En un nivel alto, la vista 
"conoce" el modelo, pero el modelo no conoce el modelo de vista, y el modelo de vista no conoce a la vista. Por lo tanto, el modelo de vista aisla la vista
del modelo y permite que el modelo evolucione independientemente de la vista.

La clave para usar MVVM de manera efectiva radica en comprender como factorizar el codigo de la aplicacion en las clases correctas y como interactuan
las clases.

-------------

The pattern 

There are three core components in the MVVM pattern: the model, the view, and the view model. Each servers a distrinct purpose. The following diagram shows 
the relationships between the three components.

        VIEW----------->VIEW MODEL------------> MODEL

In addition to understanding the responsabilities of each component, it's also important to understand how they interact. At a higth level, the view
"knows about" the view model, and the view model "knows about" the model, but the model is unaware of the view model, and the view model is unaware of the view.
Therefore, the view model isolates the view from the model, and allows the model to evolve independently of the view.

The key to using MVVM effectively is understanding how to factor app code into the correct classes and how the classes interact.

----------------

Vista 

La vista es responsable de definir la estructura, el diseño y la apariencia de lo que el usuario ve en la pantalla. Lo ideal es que cada
vista se defina en XAML, con un codigo subyacente limitado que no contiene logica empresarial. Sin embargo, en algunos casos, el codigo subyacente puede 
contener logica de interfaz de usuario que implemente un comportamiento visual que es dificil de expresar en XAML, como animaciones.

---------------

View

The view is responsible for defining the structure, layout, and appareance of what the user sees on screen. Ideally, each view is defined in XAML, with
a limited code-behind that doesn't contain business logic. However, in some cases, the code-behind migth contain UI logic that implements visual bhavior 
that is difficult to express in XAML, such as animations.

----------------

Modelo de vista

El modelo de vista implementa propiedades y comandos a los que la vista puede vincular datos y notifica a la vista de cualquier cambio de estado a traves
de eventos de notificacion de cambios. Las propiedades y los comandos que proporciona el modelo de vista definen la funcionalidad que ofrecera la interfaz de usuario,
pero la vista determina como se mostrara esta funcionalidad.

El modelo de vita tambien es reponsable de coordinar las interacciones de vista con cualquier clase de modelo que sea necesaria. Normalmente, existe una relacion de uno a 
muchos entre el modelo de vista y las clases del modelo.

Cada modelo de vista proporciona datos de un modelo en un formato que la vista puede consumir facilmente. Para lograr esto, el modelo de vista a veces realiza una conversion
de datos. Colocar esta conversion de datos en el modelo de vista es una buena idea porque proporciona propiedades a las que la vista puede vincularse. Por ejemplo, el modelo
de vista puede combinar los valores de dos propiedades para que sea mas facil de mostrar en la vista.

***IMPORTANTE***
.NET MAUI organiza las actualizaciones de enlaces en el subproceso de la interfaz de usuario. Al utilizar MVVM, esto le permite actualizar las propiedades del modelo de vista 
enlazadas a datos desde cualquier subproceso, y el motor de enlaces de .NET MAUI lleva las actualizaciones al subproceso de la interfaz de usuario.

------------------

ViewModel

The view model implements properties and commands to which the view can data bind to, and notifies the view of any state changes though change notification events. 
The properties and commands that the view model provides define the functionality to be offered by the UI, but the view determines how that functionality is to be displayed.

The view model is also responsible for coordinating the view's interactions with any model classes that are required. There's typically a on-to-many relationship between the view 
model and the model classes.

Each view model provides data from a model in a form that the view can easily consume. To accomplish this, the view model sometimes performs data conversion. Placing this data conversion 
in the view model is a good idea because it provides properties that the view can bind to. For example, the view model migth combine the values of two properties to make it easier to 
display by the view.

***IMPORTANT***
.NET MAUI marshals binding updates to the UI thread. When using MVVM this enables you to update data-bound viewmodel properties from any thread, with .NET MAUI's binding engine bringing the 
updates to the UI thread.

----------

Modelo 

Las clases de modelo son clases no visuales que encapsulan los datos de la aplicacion. Por lo tanto, se puede pensar que el modelo representa el modelo de dominio de la 
aplicacion, que generalmente incluye un modelo de datos junto con la logica empresarial y de validacion.

---------------

Model

Model classes are non-visual classes that encapsulate the app's data. Therefore, the model can be though of as representing the app's domain model, wich usually includes 
a data model along with buisnees and validation logic.


----------------------------------------

Limpiar el modelo

En el tutorial anterior, los tipos de modelo actuaban como modelo (datos) y como modelo de vista (preparacion de datos), que se asignaba directamente a una vista.
La siguiente tabla describe el modelo:

MODELO/ABOUT.CS   El About modelo. Contiene campos de solo lectura que desriben la aplicacion en si, como el titulo y la version de la aplicacion.

MODELO/NOTE.CS    El Note modelo. Representa una nota.

MODELO/ALLNOTES.CS   El AllNotes modelo carga todas las notas del dispositivo en una coleccion.

Si pensamos en la aplcacion en si, solo hay un dato que utiliza la aplicacion: el Note. Las notas se cargan desde el dispositivo y se editan 
a traves de la interfaz de usuario de la aplicacion. En realidad, no hay necesidad de los modelos About y AllNotes. 

--------------------

Clean up the model

In the previous tutorial, the model types were acting both as the model (data) and as a view model (data preparation), which was mapped directly to 
a view. The following talbe describes the model:

MODEL/ABOUT.CS  The About model . Contains read-only fields that describe the app itself, such as the app title and version.

MODELS/NOTE.CS  The Note model. Represents a note.

MODELS/ALLNOTE.CS  The AllNote model. Loads all of the notes on the device into a collection.

Thinking about the app itself, there is only one piece of data that is used by the app, the Note. Notes are loaded from the device,
saved to the device, and edited trough the app UI. There really isn´t a need for the About and AllNotes models.

-----------------

Desacoplar con modelos de vista

La relacion entre vistas y modelos de vista depende en gran medida del sistema de enlaces que proporciona .NET MAUI. La aplicacion ya utiliza
enlaces en las vistas para mostrar una lista de notas y presentar el texto y la fecha de una sola nota. La logica de la aplicacion actualmente 
proporciona el codigo subyacente de la vista y esta directamente vinculada a la vista. Por ejemplo, cuando un usuario esta editando una nota y presiona
el boton Guardar Cicked, se genera el evento del boton. Luego, el codigo subyacente del controlador de eventos guarda el texto de la nota en un archivo 
y navega a la pantalla anterior.

Tener logica de aplicacion en el codigo subyacente de una vista puede convertirse en un problema cuando la vista cambia. Por ejemplo, si el boton
se reemplaza con un control de entrada diferente o se cambia el nombre de un control, los controladores de eventos pueden dejar de ser validos.
Independientemente de como esta diseñada la vista, el proposito de la vista es invocar algun tipo de logica de aplicacion y presentar informacion al usuario.
Para esta aplicacion, el Save boton guarda la nota y luego vuelve a navegar a la pantalla anterior.

El modelo de vista la da a la aplicacion un lugar especifico para colocar la logica de la aplicacion, independientemente de como este diseñada la interfaz de
usuario o de como se carguen o guarden los datos. El modelo de vista es el pegamento que representa e interactua con el modelo de datos en nombre
de la vista.

----------------------

Decouple with view models 

The view-to-viewmodel relationship relies heavily on the binding sstem provide by. NET MAUI. The app is already using binding in the views to display a list
of notes and to present the text and date of a single note. The app logic is currently provided by the view's code-behind and is directly tied to the view.
For example, when a user is editing a note and presses the Save button, the Clicked event for the button is raised. Then, the code-behind for the event handler 
saves the note text to a file and navigates to the previous screen.

Having app logic in the code-behind of a view can become an issue when the view changes. For example if the button is replaced with a different input control, 
or the name of a control ins changed, event handlers may become invalid. Regardless of how the view is seigned, the purpose of the view is to invoke some sort 
of app logic and to present information to the user. For this app, the Save button is saving the note and then nagiating back to the previus screen.

The viewmodel gives the app a specific place to put the app logic regardless of how the UI designed or how the data is being loaded or saved. The viewmodel is the
glue that represents and interacts with the dada model on behalf of the view.

--------------------

El fragmento de codigo anterior contiene algunas propiedades que representan informacion sobre la aplicacion, como el nombre y la version. Este fragmento es 
exactamente el mismo que el modelo Acerca de que eliminaste anteriormente. Sin embargo, este modelo de vista contiene un concepto  nuevo: la ShowMoreInfoCommand
prpiedad de comando.

Los comandos sonacciones enlazables que invocan codigo y son un exelente lugar para colocar la logica de la aplicacion. En este ejemplo, ShowMoreInfoCommand
apunta al ShowMoreInfoCommand apunta al ShowMoreInfo metodo, que abre el navegador web a una pagina especifica.

-------------
Crear el modelo de vista de notas

El objetivo de actualizar la vista de Nota es mover la mayor cantidad de funcionalidad posible fuera de codigo XAML subyacente y colocarla en el modelo de vista de Nota.

Modelo de vista de nota

En funcion de lo que requiere la vista de Nota, el modelo de vista de Nota debe proporcionar los siguientes elementos:
* El texto de la nota.
* La fecha y hora que se creo o actualizo la nota por ultima vez.
* Un comando que guarda la nota.
* Un comando que elimina la nota.

--------------

Create the Note viewmodel

The goal updating the Note view is te move as much funcionality as possible out of the XAML code-behind and put in the Note viewmodel.

Note viewmodel

Based on what the Note view requires, the Note viewmodel needs to provide the following items:
* The text of the note.
* The date/time the note was created or last updated.
* A command that saves the note.
* A command that deletes the note.

-------------------------

using CommunityToolkit.Mvvm.Input;
using CommunityToolkit.Mvvm.ComponentModel;
using System.Windows.Input;

namespace Notes.ViewModels;

internal class NoteViewModel : ObservableObject, IQueryAttributable
{
    private Models.Note _note;

}

Este codigo es el Note modelo de vista en blanco donde agregara propiedades y comadnos para respaldar la vista. Observe que se esta 
importando Note el espacio de nombres. Este espacio de nombres proporciona el uso como clase base. Aprendera mas sobre esto en el siguiente paso.
El espacio de nombres tambien se importa. Este espacio de nombres proporciona algunos tipos de comandos que invocan metodos de forma asincronica.
CommunityToolkit.Mvvm.ComponentModelObservableObjectObservableObjectCommunityToolkit.Mvvm.Input.

El Models.Note modelo se almacena como un campo privado. Las propiedades y los metodos de esta clase utilizaran este campo.

----------

This code is tha blank note viewmodel where you'll add properties and commands to support the Note view. Notice that the  CommunityToolkit.Mvvm.ComponentModel
namespace is being imported. This namespace provides the ObservableObject  used as the base class. You'll learn more about ObservableObject in the next step.
The CommunityToolkit.Mvvm.Input namespace is also imported. This namespace provides some command-types that invoke methods asynchronously.

The Models.Note model is being stored as a private field. The properties and methods of this class will use this field.

----------------

Las propiedades Date e Identifier son propiedades simples que simplemente recuperan los valores correspondientes del modelo.

Para las propiedades, la => sintaxis crea una propiedad de solo obtencion donde la declaracion a la derecha => debe evaluarse como un valor a devolver.

La Text propiedad primer verifica si el valor que se establece es un valor diferente. Si el valor es diferente, ese valor se pasa a la propiedad del modelo OnPropertyChanged
se llama al metodo.

El OnPropertyChanged metodo lo proporciona la ObservableObject clase base. Este metodo utiliza el nombre del codigo de llamada, en este caso, el nombre de la propiedad Text, y genera
el ObservableObject.PropertyChanged evento. Este evento proporciona el nombre de la propiedad a cualquier suscriptor de eventos. El sistema de enlaces proporcionado por .NET MAUI reconoce
este evento y actualiza los enlaces relacionados en la interfaz de usuario. Para el modelo de vista Note, cuando la Text propiedad cambia, se genera el evento y se notifica a cualquier elemento
de la interfaz de usuario que este enlazado a la Text propiedad que la propiedad ha cambiado.

-------------------------

The Date and Indefitier properties are simple properties that just retrieve the corresponding values from the mode.

Tip**
For properties, the => syntax creates a get-only orperty where the statement to the rigth of => must evaluate to a value to return.

The Text property first checks if the value being set is a different value. If the value is different, that value is passed on to the model's property, and the OnPropertyChanged 
method is called.

The OnPropertyChanged method is provided by the ObservableObject base class. This method uses the name of the calling code, in this case, the orperty name of Text, and raises the
ObservableObject.PropertyChanged event. This event supplies the name of the property to any event suscribers. The binding system provided by .NET MAUI recognizes this event, and updates
any related bindings in the UI. For the Note viewmode, when the Text property changes, the event is raised, and any UI element that is bound to the Text property is notifield that the property changed.

-----------------

Cuando una pagina, o el contexto de enlace de una pagina implementa esta interfaz, los parametros de la cadena de consulta utilizados en la navegacion se pasan al ApplyQueryAttributes metodo. Este modelo
de vista se utiliza como contexto de enlace para la vista Note.
Cuando se navega a la vista Note, el contexto de enlace de la vista (este modelo de vista) recibe los parametros de la cadena de consulta utilizados durante la navegacion.

Este codigo comprueba si la load clave se proporciono en el query diccionnario. Si se encuentra esta clave, el valor debe ser el identificador (el nombre del archivo) de la nota que se va a cargar. Esa nota
se carga y se establece como el objeto de modelo subyacente de esta instancia de modelo de vista.

-----------------

When a page, or the binding context of a page, implements this interface, the query string parameters used in navigation are passed to the ApplyQueryAttributes method. This viewmodel is used as the binding context
for the Note view. When the Note view is navigated to, the view's binding context (this viewmodel) is passed the query string parameters used during navigation.

This code checks if the load key was provided in the query dictionary. If this ket is found, the value should be the identifier (the file name) of the note to load. That note is loaded and set as the underyling model
object of this viewmodel instance.

-----------------

El Reload metodo es un metodo auxiliar que actualiza el objeto del modelo de respaldo y lo recarga desde el almacenamiento del dispositivo.

El RefreshProperties metodo es otro metodo auxiliar para garantizar que se notifique a todos los suscriptores vinculados a este objeto que las propiedades Text y Date han cambiado. Dado que el modelo subyacente (el _note campo)
cambia cuando se carga la nota durante la navegacion, las propiedades Text y Date no se configuran realmente con nuevos valores. Dado que estas propiedades no se configuran directamente, no se 
notificara a ninguna vinculacion asociada a estas propiedades porque OnPropertyChanged no se llama para cada propiedad. RefreshProperties garantiza que se actualicen las vinculaciones a estas propiedades.

---------------------------

The Reload method is a helper method that refreshes the backing model object, reloading it from device storage.

The RefreshProperties method is another helper method to ensure that any suscribers bound to this object are notified that the Text and Date properties have changed. Since the underlying model (the _note field) is changed
when the note is loaded during navigation, the Text and Date properties aren't directly set, any bindings attached to those properties wouldn't be notifield because OnPropertChanged isn't called for each property. RefreshProperties ensures
bindings to these properties are refreshed.

---------------

*En tiempo de ejecucion, cuando se accede a la pagina se muestra una nota en blanco. Esto se debe a que se invoca el constructor sin parametros para el contexto de enlace, el modelo de vista. Si recuerda correctamente el consturctor
sin parametros para el modelo de vista Note crea una nota en blanco.

*El intellisense del editor XAML muesrta las propieddades disponibles tan pronto como comienzas a escribir {Binding la sintaxis. La sintaxis tambien se valida y te avisa de un valor no valido. Prueba a cambiar la sintaxis de enlace de SaveCommand
to Save123Command. Si pasas el cursor del raton sobre el texto, notaras que muestra una informacion sobre herramientas que te informa de que no se encuentra Save123Command. Esta notificacion no se considera un error porque los enlaces son dinamicos,  
es realmente una pequeña advertencia que puede ayudarte a notar cuando escribiste la propiedad incorrecta.

----------------------------------

*At run-time, when the page is navigated to, it displays a blank note. This is because the parameterless constructor for the binding context, the viewmodel, is invoked. If you remember correctly, the parameterless constructor for the Note viewmodel creates
a blank note.

*The intellisesnse in the XAML editor shows the aviable properties as soon as you start typing {Binding syntax. The syntax is also validated and alerts you of an invalid value. Try changing the binding syntax for the SaveCommand to Save123Command. If you hover
the mouse cursor over the text, you'll notice that  a tooltip is displayed informing you that Save123Command ins't found. This notification isn't considered an error because bindings are dynamic, it's really a small warning that  may help you notice when you
typed the wrong property.

-----------------------

El par de vista-modelo final es el modelo de vista Notes y la vista AllNotes. Sin embargo, actualmente, la vista se vincula directamente al modelo, que se elimino al comienzo de este tutorial. El objetivo de actualizar la vista AllNotes es sacar la mayor cantidad 
de funcionalidad de codigo subyacente XAML y colocarla en el modelo de vista Nuevamente, el beneficio es que la vista puede cambiar su diseño con poco efecto en su codigo.

------------------------

The final viewmodel-view par is the Notes viewmodel and AllNotes view. Currently though, the view is binding directly to the model, which was deleted at the start of this tutorial. The goal in updating the AllNotes views is to moves as much funcionality as possible out of 
the XAML code-behind and put in the viewmodel. Again, the benefit being that the view can change its desing with litte effect to your code.

----------------------------

La AllNotes propiedad ObservableCollection almacena todas las ntoas cargadas desde el dispositivo. La vista utilizara los dos comandos para activar las acciones de crear una nota o seleccionar una nota existente.

-----------------

The AllNotes property is an ObservableCollection that stores all of the notes loaded from the device. The two commands will be used by the view to trigger the actions of creating a note or selecting an existing note.

----------------

Tenga en cuenta que la AllNotes coleccion utiliza el Models.note.LoadAll metodo para llenar la coleccion observable con  notas. El LoadAll metodo devuelve las notas como Models.Note tipo, pero la coleccion observable es una coleccion de ViewModels.NoteViewModel tipos.
El codigo utiliza la Select extension Linq para crear instancias de modelos de vista a partir de los modelos de notas ddevueltos desde LoadAll.

----------------

Notice that the AllNotes collection uses the Models.Note.LoaddAll method to fill the observable collection with notes. The LoadAll method returns the notes as the Models.Note type, but the observable collection is a collection of ViewModels.NoteViewModel types.
The code uses the Selecty Liinq extension to create viewmodel instances from the note models returned from LoadAll.

--------------------

Tenga en cuenta que el NewNoteAsync metodo no toma un parametro, mientras que el SelectNoteAsync si lo hace. Los comandos pueden tener opcionalmente un unico parametro que se proporciona cunado se invoca el comando. Para el SelectNoteAsync metodo, el parametro representa la 
que se esta seleccionando.

-------------------------------------

Notice that the NewNoteAsync method doesn´t take a parameter while the SelectNoteAsync does. Commands can optionally have a single parameter that is provided when the command is invoked. For the SelectNoteAsync method, the parameter represents the note that's being selected.

----------------

El modelo de vista de notas creado en el paso anterior del tutorial utilizo la navegacion cuando se guardo o elimino la nota. El modelo de vista navego de regreso a la vista AllNotes, con la que esta asociado este modelo de vista. Este codigo detecta si la cadena de consulta 
contiene la clave deleted o saved la clave. El valor de la clave es el identificador unico de la nota.

Si se elimino la nota, dicha nota coincide en la AllNotes collection con el identificador proporcionado y se elimina.

Hay dos posibles razones por las que se guarda una nota. La nota se acaba de crear o se modifico una nota existente. Si la nota ya esta en la AllNotes coleccion, es una nota que se actualizo. En este caso, solo es necesario actualizar la instancia de la nota en la coleccion.
Si la nota no esta en la coleccion, es una nota nueva y se debe agregar a la coleccion.

----------------------

The Note viewmodel created in the previous tutorial step, used navigation when the note was saved or deleted. The viewmodel navigated back to the AllNotes view, which this viewmodel is associated with. This code detects if the query string contains either the deleted or saved key.
The value of the key is the unique identifier of the note.

If the note was deleted, that note is matched in the AllNotes collection by the provied indetifier, and removed.

There are two possible reasons a note is saved. The note was either just created or an existing note was changed. If the note is already int he AllNotes collection, it's a note that was updated. In this case, the note instance in the collection just needs to the refreshed. If the
note is missing from the collection, it's a new note and must be added to the collection.

----------------------

La barra de herramientas ya no utiliza el Clicked evento y en su lugar utiliza un comando.

El collectionView comando admite las propiedades SlectionChangedCommand y SelectionChangedCommandParameter. En el XAML actualizado, la SelectionChangedCommand propiedad esta vinculada al modelo de vista SelectNoteCommand, lo que significa que el comando se invoca cuando cambia el 
elemento seleccionado. Cuando se invoca el comando, el SelectionChangedCommandParameter valor de la propiedad de pasa al comando.

---------------

The toolbar no longer uses the Clicked event and instead uses a command.

The CollectionView supports commanding with the SelectionChangedCommand and SelectionChangedCommandParameter properties. In the updated  XAML, the SelectionChangedCommand property is bound to the viewmodel's SelectNoteCommand, wich means the command
is invoked, the SelectionChangedCommandParameter property value is passed to the command.

------------------

Permitir seleccionar una nota dos veces 

En la vista AllNotes, CollectionView se muestran todas las notas, pero no se permite seleccionar la misma nota dos veces. Hay dos formas en las que un elemento permanece seleccionado: cuando el usuario cambia una nota existente y cuando el usuario 
navega hacia atras a la fuerza. El caso en que el usuario guarda una nota se soluciona con el cambio de codigo en la seleccion anterior que usa AllNotes.Move, por lo que no tiene que preocuparse por ese caso.

El problema que tienes que resolver ahora esta relacionado con la navegacion. No importa como se navegue a vista de AllNotes NavigatedTo, el evento se genera para la pagina.
Este evento es el lugar perfecto para anular la seleccion del elemento seleccionado en el CollectionView.

Sin embargo, con el patron MVVM aplicado aqui, el modelo de vista no puede activar algo directamente en la vista, como borrar el elemento seleccionado despues de guardar la nota. Entonces ¿Como se consigue que esto suceda?
Una buena implementacion de patron MVVM minimiza el codigo subyacente en la vista. Hay algunas formas diferentes de resolver este problema para admitir el patron de separacion MVVM. Sin embargo, tambien esta bien colocar el codigo en el codigo
subyacente de la vista, especialmente cuando esta directamente vinculado a la vista. MVVM tiene muchos diseños y conceptos excelentes que lo ayudan a compartimentar su aplicacion, lo que mejora la capacidad de mantenimiento y le facilita la incorporacion
de nuevas funciones. Sin embargo, en algunos casos puede encontrar que MVVM fomenta la ingenieria excesiva.

-----------------

Allow selecting a note twice

In the AllNotes view, the CollectionView list all of the notes, but doesn't allow you to select the same note twice. There are two ways the item remains selected: when the user changes and existing note, and when the user forcible navigates backwards.
The case where the user saves a note is fixed with the code change in previus section that uses AllNotes.Move, so you don't have to worry about that case.

The problem you have to solve now is related to navigation. No matter how the Allnotes view is navigated to, the NavigatedTo event is raised for the page. This event is a peprfect place to forcibly the selected item in the CollectionView.

However, with the MVVM patter being applied here, the viewmodel can't trigger something directly on the view, such as clearing the selected item after the note is saved. So how do you get that to happen? A good implementation of the MVVM patter minimizes 
the code-behind in the view. There are a few different ways to solve this problem to support the MVVM separation patter. However, it's also OK to put code in the code-behind of the view, especially when it's directly tied to the view. MVVM has many great 
desings and concepts that help you comparmentalize your app, improving maintainability and making it eaiser for you to add new features. However, in some cases, you may find that MVVM encourages overengineering.