Consume a REST-based web service

Representational State Transfer (REST) is an architectural style for building web services. REST request are typically made over HTTPS using the same HTTP verbs that web browserts use to retrieve web pages and to send data to servers. The verbs are:

**GET- this operation is used to retrieve data from the web service.

**POST- this operation is used to create a new item of data on the web service.

** PUT-  this operation is used to update an item of data on the web service.

**PATCH- this operation is used to update an item of data on the web service by describing a set of instructions about how the item should be modified.

**DELETE- this operation is ued to delete an item of data on the web service.

Web service APIs that adhere to REST are defined using:

** A base URL.
** HTTP methods, such as GET, POST, PUT, PATCH, or DELETE.
** A media type for the data, such as JavaScript Object Notation (JSON).

REST-based web services typically use JSON messages to return data to the client.
JSON is a text-based data interchange format that produces compact payloads, wich results in reduced bandwidth requierements when sending data. The simplicity of REST  has helped make
it the primery method for accessing web services in mobile apps.

**NOTE 

Accesing a web service often requires asynchronous programming.

---------------------

Transferencia de estado representacional (REST) es un estilo arquitectonico para compilar servicios web. Las solicitudes REST se suelen realizar a traves de HTTP con los mismos verbos HTTP que los exploradores web usan para recuperar paginas web y enviar datos a los servidores. 
Los verbos son:

**GET- esta operacion se usa para recuperar datos del servicio web.

**POST- esta operacion de usa para crear un nuevo elemento de datos en el servicio web.

**PUT- esta operacion se usa para actualizar un elemento de datos en el servicio web.

**PATCH- esta operacion se usa para actualizar un elemento de datos en el servicio web describiendo un conjunto de instrucciones sobre como se debe modificar el elemento.

**DELETE- esta operacion se usar para eliminar un elemento de datos en el servici web.

Las API de de servicio web que se ajustan a REST se definen mediante:

**Identificador URL base.
**Metodos HTTP, como GET,POST,PUT,PATCH o DELETE.
¨¨Un tipo de medio para los datos como notacion de objetos JavaScript (JSON).

normalmente, los servicios web basados en REST usan mensajes JSON para devovler datos al cliente. JSON es un formlato de intercambio de datos basado en texto que genera  cargas compactas, lo que reduce los requisitos de ancho de banda al enviar datos.
La simplicidad de REST ha contribuido a convertilor en el principal metodo de acceso a servicios web en aplicaciones moviles.

**NOTA
Acceder a un servicio web requiere a menudo una programacion asincrona.


--------------------------

Web service operations

The example REST service is written using ASP.NET Core and provides the following opeprations:

** Get a list of todo items(operation)  GET(HTTP method)  /api/todoitems/(Relative URL)  

** Create a new tood item               POST              /api/todoitems/                 A JSON formatted TodoItem (Parameters)

** Update a todo item                   PUT               /api/todoitems/                 A JSON formatted TodoItem

** Delete a todo item                   DELETE            /api/tooditems/{id}

The .NET MAUI app and web services uses the TodoItem class to model the data that is displayed and sent to the web services storage:

public class TodoItem
{
    public string ID { get; set; }
    public string Name { get; set; }
    public string Notes { get; set; }
    public bool Done { get; set; }
}

The ID property is used to uniquely identify each TodoItem object, and is used by the web service to identify data to be updated or deleted. For example, to delete the TodoItem whose ID is 1, the .NET MAUI
app sends a DELETE request to https://hostname/api/todoitems/1.

When the Wweb API framework receives a request, it routes the request to an action. These actios are public methods in the TodoItemsController class. The web api framework uses routing middleware to match the URLs of incoming
request and map them to actions. REST APIs should use attribute routing to model the app's functionality as a set of resources whose operations are represented by HTTP verbs. Attribute routing uses a sret of attributes to map actions directly to route templates.

---------------------------

Las aplicaciones .NET MAUI y el servicio web usan la clase TodoItem para modelar los datos que se muestran y se enviar al servicio web para el almacenamiento:

La propiedad ID se usa apra identificar de forma unica cada objeto TodoItem y el servicio web usa para identificar los datos que se van a actualizar o eliminar. Por ejemplo, para eliminar el elemento TodoItem cuyo identificador es 1,
la aplicacion -NET MAUI envia una solicitud DELETE a hhtps://hostname/api/todoitems/1.

Cuando el marco de API web recibe una solicitud, la dirige a una accion. Estas acciones son metodos publicos en la clase TodoItemsController. El marco API WEB usa el middleware de enrutamiento para buscar las direcciones URL de las solicitudes entrantes y asignarlas a acciones.
Las API REST deben usar el enrutamineto mediante atributos para modelar la funcionalidad de la aplicacion como conjunto de recursos donde las operaciones se representan mediante verbos HTTP. El enrutamiento mediante atributos utiliza un conjunto de atributos para asignar acciones directamente a las plantillas de ruta.

---------------------

Create the HTTPClient object

A .NET Multi-platform App UI (.NET MAUI) app can consume a REST-based web services by sending request to the web service with the HttpClient class. This class provides functionality for sending HTTP request and receiving HTTP responses from a URL identified resource. Each request is sent as an asyncronous operation.

The HttpClient object should be declared at the class-level so that it lives for as long as the app needs to make HTTP request:

public class RestService
{
    HttpClient _client;
    JsonSerializerOptions _serializerOptions;

    public List<TodoItem> Items { get; private set; }

    public RestService()
    {
        _client = new HttpClient();
        _serializerOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = true
        };
    }
    ...
}

The JsonSerializerOprtions object is used to configure the formatting of the JSON payload that's received from and sent to the web service.

----------------------

Creacion del objeto HTPPclient

Una .NET MAUI app puede consumir un servicio web basado en REST mediante el envio de solicitudes al servicio web con la clase HTTPCliten. Esta clase proporciona funcionalidad para enviar solicitudes HTTP Y RECIBIR RESPUESTAS
http de un recurso identificado por URL. Cada una de estas solicitudes se envia como una operacion asincronica.

El objeto HttpClient debe declararse a nivel de clase para que resida mientras la aplicacion necesite realiar solicitudes HTTP:


public class RestService
{
    HttpClient _client;
    JsonSerializerOptions _serializerOptions;

    public List<TodoItem> Items { get; private set; }

    public RestService()
    {
        _client = new HttpClient();
        _serializerOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = true
        };
    }
    ...
}

El objeto HsonSerializerOptions se usa para configurar el formato de la carga JSON que se recibe y se envia al servicio web.

-------------------

Retrieve data

The HttpClient.GetAsync method is ued to send a GET request to the web service specified by the URL, and then receive the response from the web service:

public async Task<List<TodoItem>> RefreshDataAsync()
{
    Items = new List<TodoItem>();

    Uri uri = new Uri(string.Format(Constants.RestUrl, string.Empty));
    try
    {
        HttpResponseMessage response = await _client.GetAsync(uri);
        if (response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            Items = JsonSerializer.Deserialize<List<TodoItem>>(content, _serializerOptions);
        }
    }
    catch (Exception ex)
    {
        Debug.WriteLine(@"\tERROR {0}", ex.Message);
    }

    return Items;
}

Data is recived from the web service as a HttpResponseMessage object. It contains information about the reponse, including the status code, headers, and any body. The REST service sends an HTTP status code in its response,
wich can be obtained from the HttpResponseMessage.IsSuccesStatusCode property, to indicate whether the HTTP request succeded or failed. For this operation the REST service sends HTTP status code 200(OK) in the respinse, which indicates
that the request succeeded and that the requested information is in the response.

If the HTTP operation was succesful, the content of the response is read. The HttpResponseMessage.Content property represents the content of the response, and is of type  HttpContent. The HttpContent class represents the HTTP body and content headers, such as Content-Type and Content-Encoding.
The content is then read into a string using the HttpContent.ReadAsSrtringAsync method. The string is then deseialized from JSON to a List of TodoItems objects.

**WARNING** 
Using the ReadAsString method to retrieve a large response can have a negative performance impact. In such circumstances the response should be directly deserialized to avoid having to fully buffer it.

Recuperacion de datos

El metodo HttpClient.GetAsync se usa para enviar una solicitud GET al servicio web especificado por el URI y, a continuacion recibir la respuesta del servicio web:

public async Task<List<TodoItem>> RefreshDataAsync()
{
    Items = new List<TodoItem>();

    Uri uri = new Uri(string.Format(Constants.RestUrl, string.Empty));
    try
    {
        HttpResponseMessage response = await _client.GetAsync(uri);
        if (response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            Items = JsonSerializer.Deserialize<List<TodoItem>>(content, _serializerOptions);
        }
    }
    catch (Exception ex)
    {
        Debug.WriteLine(@"\tERROR {0}", ex.Message);
    }

    return Items;
}

Los datos se reciben del servicio web como un obeto HttpResponseMessage. Coniene informacion sobre la respuesta, incluido el codigo de estado, los encabezados y cualquier cuerpo. El servicio REST envia un codigo de estado HTTP en su respuesta, que se puede obtener
de la propiedad HttpResponseMessage.IsSuccessStatusCode, para indicar si la solicitud HTTP se realizo correctamente o no. Para esta operacion, el servicio REST envia el codigo de estado HTTP 200(Correcto) en la respuesta, lo que indica que la solicitud se realizo correctamente y que la informacion solicitada esta en la respuesta.

Si la operacion HTTP se realizo correctamente, se lee el contenido de la respuesta. La propiedad HttpResponseMessage.Content representa el contenido de la respuesta y es de tipo HttpContent. La clase HttpContent representa el cuerpo HTTP y los encabezados de contenido, como Content-type y Content-Encoding.

**Advertencia**
El uso del metodo ReadAsAsync para recuperar una respuesta grande puede tener un impacto negativo en el rendimiento. En tales circunstancias, la respuesta debe deserializarse directamente para evitar tener que almacenarla completamente en bufer.

-------------------------

Create data
The HttpClient.PostAsync method is used to send a POST request to the web service specified by the URI, and then to receive the response from the web service:

public async Task SaveTodoItemAsync(TodoItem item, bool isNewItem = false)
{
    Uri uri = new Uri(string.Format(Constants.RestUrl, string.Empty));

    try
    {
        string json = JsonSerializer.Serialize<TodoItem>(item, _serializerOptions);
        StringContent content = new StringContent(json, Encoding.UTF8, "application/json");

        HttpResponseMessage response = null;
        if (isNewItem)
            response = await _client.PostAsync(uri, content);
        else
            response = await _client.PutAsync(uri, content);

        if (response.IsSuccessStatusCode)
            Debug.WriteLine(@"\tTodoItem successfully saved.");
    }
    catch (Exception ex)
    {
        Debug.WriteLine(@"\tERROR {0}", ex.Message);
    }
}

In tis example, the TodoItem instance is serialized to a JSON payload for sending to the web service. This payload is then embedded in the body of the HTTP content that will be sent to the web service before
the request is made with the PostAsync method.

The REST service sends an HTTP status code in its response, which can be obtained from the HttpResponseMessage.IsSuccessStatusCode property, to indicate whether the HTTP request succeeded or failed. The typical responses for this operation are:
** 201 (CREATED) - the request resulted in a new resource being created before the response was sent.
** 400 (BAD REQUEST) - the request is not understood by the server.
** 409 (CONFLICT) - the request could not be carried out because of a conflict on the server.

Crear datos

El metodo HttpClient.PostAsync se usa para enviar una solicitud POST al servicio web especificado por el URI y , a continuacion, para recibir la respuesta del servicio web:

public async Task SaveTodoItemAsync(TodoItem item, bool isNewItem = false)
{
    Uri uri = new Uri(string.Format(Constants.RestUrl, string.Empty));

    try
    {
        string json = JsonSerializer.Serialize<TodoItem>(item, _serializerOptions);
        StringContent content = new StringContent(json, Encoding.UTF8, "application/json");

        HttpResponseMessage response = null;
        if (isNewItem)
            response = await _client.PostAsync(uri, content);
        else
            response = await _client.PutAsync(uri, content);

        if (response.IsSuccessStatusCode)
            Debug.WriteLine(@"\tTodoItem successfully saved.");
    }
    catch (Exception ex)
    {
        Debug.WriteLine(@"\tERROR {0}", ex.Message);
    }
}

En este ejemplo, la instancia TodoItem se serializa en una carga JSON para enviar al servicio web. A continuacion, esta carga se inserta en el cuerpo del contenido
HTTP que se enviara al servicio web antes de realizar la solicitud con el metodo PostAsync.

El servicio REST envia un codigo de estado HTTP en su respuesta, que se puede obtener de la propiedad HttpResponseMessage.IsSuccessStatusCode, para indicar si la solicitud HTTP se realizo correctamente
o no. Las respuestas tipicas para esta operacion son:
** 201 (CREATED): la solicitud dio lugar a que se creara un nuevo recurso antes de enviar la respuesta.
** 400 (BAD REQUEST): el servidor no entiende la solicitud.
** 409 (CONFLICT) no se pudo realizar la solicitud debido a un conflicto en el servidor.

----------------------------

Update data

The HttpClient.PutAsync method is used to send a PUT request to the web service specified by the URI, and then receive the response from the web service:

public async Task SaveTodoItemAsync(TodoItem item, bool isNewItem = false)
{
  ...
  response = await _client.PutAsync(uri, content);
  ...
}

The operation of the PutAsync method is identical to the PostAsync method that's used for creating data in the web service. However, the possoble responses sent from the web service differ.

The REST service sends an HTTP status code in its seponse, which can be obtained from the HttpResponseMessage.IsSuccessStatusCode property, to indicate whether the HTTP request succeded or failed. The typical reponses for this operation are:

** 204(NO CONTENT) - the request has been succesfully processed and the response is interntionally blank.
** 400(BAD REQUEST) - the request is not understood by the server.
** 404(NOT FOUND) - the requested resource does not exist on the server.

------------------

Delete data

The HttpClient.DeleteAsync method is used to send a DELETE request to the web service specified by the URI, and then receive the response from the web service:

public async Task DeleteTodoItemAsync(string id)
{
    Uri uri = new Uri(string.Format(Constants.RestUrl, id));

    try
    {
        HttpResponseMessage response = await _client.DeleteAsync(uri);
        if (response.IsSuccessStatusCode)
            Debug.WriteLine(@"\tTodoItem successfully deleted.");
    }
    catch (Exception ex)
    {
        Debug.WriteLine(@"\tERROR {0}", ex.Message);
    }
}

The REST service sends an HTTP status code in its reponse, which can be obtained from the HttpResponseMessage.IsSuccesStatusCode property, to indicate whether the HTTP request succeded or failed. The typical responses for this operation are:

**204 (NO CONTENT) - the request has been succesfully processed and the response is intentionally blank.
**400 (BAD REQUEST) - the request is not understood by the server.
**404 (NOT FOUND) - the requested respurce does not exist on the server.

Eliminacion de datos

El metodo 

