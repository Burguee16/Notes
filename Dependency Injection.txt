Dependency Injection

Tupically, a class constructor is invoked when instantiating an object, and any values that the object needs are passed as arguments
to the constructor. This is an example oof dependency injection known as constructor injection. The dependencies the object needs are injected into the 
constructor.

By specifying dependencies as interface types, dependency injection enables decoupling the concrete types from the code that depends on these types. It generally uses a container that
holds a list of registrations and mappings between interfaces and abstract types, and the concrete types that implement or extend these types.

There are also other types of dependency injection, such as property setter injection and method call injection, but they are less commonly seen. Therefore, this charpter will focus solely on performing constructor
injection with a dependency injection container.


----------------------------------

Normalmente, se invoca un constructor de clase al crear una instancia de un objeto y todos los valores que necesita el objeto se pasan como argumentos al constructor. Este es un ejemplo de inyeccion de dependencias conocido
como inyeccion de constructor. Las dependencias que necesita el objeto se inyectan en el constructor.

Al especificar dependencias como tipos de interfaz, la inyeccion de dependecias permite desacoplar los tipos concretos del codigo que depende de estos tipos. Generalmente, utiliza un contenedor entre interfaces y tipos abstractos
y los tipos concretos que implementan o extienden estos tipos.

Tambien existen otros tipos de inyeccion de dependencias como la inyeccion de establecedores de propiedades y la inyeccion de llamadas a metodos, pero se observan con menos frecuencia. Por lo tanto, este capitulo se centrara unicamente en la realizacion
de la inyeccion de constructores con un contenedor de inyeccion de dependencias.

Introduccion a la inyeccion de dependencias

La inyeccion de dependencias es una version especializada del patron Inversion de control (IoC), en el que lo que se invierte es el proceso de obtencion de la dependencia requerida. Con la inyeccion de dependencias, otra clase es responsable de inyectar dependencias
en un objeto en tiempo de ejecucion. 

private readonly ISettingsService _settingsService;
private readonly IAppEnvironmentService _appEnvironmentService;

public ProfileViewModel(
    IAppEnvironmentService appEnvironmentService,
    IDialogService dialogService, 
    INavigationService navigationService, 
    ISettingsService settingsService)
    : base(dialogService, navigationService, settingsService)
{
    _appEnvironmentService = appEnvironmentService;
    _settingsService = settingsService;

    // Omitted for brevity
}

El ProfileViewModel constructor recibe varias instancias de objetos de interfaz como argumentos inyectados por otra clase. La unica dependencia en la ProfileViewModel clase es la de los tipos de interfaz. Por lo tanto, la ProfileViewModel clase no tiene conocimiento de la clase que es responsable
de instanciar los objetos de interfaz. La clase que es responsable de instanciar los objetos de interfaz e insertarlos en la ProfileViewModel clase se conoce como contenedor de inyeccion de dependencias.

Los contenedores de inyeccion de dependencias reducen el acoplamiento entre objetos al proporcionar una funcion para crear instancias de clases y administrar su duracion en funcion de la configuracion del contenedor. Durante la creacion de un objeto, el contenedor inyecta en el todas las dependencias que el objeto requiere.
Si esas dependencias aun no se han creado, el contenedor crea y resuelve sus dependencias primero.

El uso de un contenedor de inyeccion de dependencias tiene varias ventajas:
 *** Un contenedor elimina la necesidad de que una clase localice sus dependencias y administre sus duraciones de vida.
 
 *** Un contenedor permite el mapeo de dependencias implementadas sin afectar la clase.
 
 *** Un contenedor facilita la capacidad de prueba al permitir simular dependencias.

 *** Un contenedor aumenta la capacidad de mantenimiento al permitir que se agreguen facilmente nuevas clases a la aplicacion.

En el contexto de una aplicacion .NET MAUI que utiliza MVVM, normalmente se utilizara un coontenedor de inyeccion de dependencia para registrar y resolver listas, registrar y resolver modelos de vista y para registrar servicios e inyectarlos en modelos de vista.

Hay muchos contenedores de inyeccion de dependencias disponibles en .NET; la aplicacion multiplataforma eShop utiliza Microsoft.Extensions.DependencyInjection para administrar la instanciacion de vistas, modelos de vista y clases de servicio en la aplicacion.
Microsoft.Extensions.DependencyInjection facilida la creacion de aplicaciones acopladas de forma flexible y proporciona todas las caracteristicas que se encuentran comunmente en los contenedores de inyeccion de dependencias, incluidos los metodos para registrar asignaciones de tipos e instancias de objetos, resolver objetos, administrar la duracion
de los objetos e inyectar objetos dependientes en los constructores de los objetos que resuelve.

En .NET MAUI, la MauiProgram clase llamara al CreateMauiApp metodo para crear un MauiAppBuilder objeto. El MauiAppBuilder objeto tiene una Services propiedad de tipo IserviceCollection, que proporciona un lugar para registar nuevos componentes, 
como vistas, modelos de vista y servicios para la inyeccion de dependencias. Todos los componentes registrados con la Services propiedad se proporcionaran al contenedor de inyeccion de dependencias cuando MauiAppBuilder.Build se llame al metodo.

En tiempo de ejecucion, el contenedor debe saber que implementacion de los servicios se estan solicitando para poder instanciarlos para los objetos solicitados. En la aplicacion multiplataforma eShop, las IAppEnvironmentService interfaces IDialogService, INavigationService y ISettingsService deben resolverse antes de poder instanciar un ProfileViewModel objeto.
Esto implica que el contenedor realice las siguientes acciones:

*** Decidir como instanciar un objeto que implementa la interfaz. Esto se conoce como registro.

*** Instanciacion del objeto que implementa la interfaz requerida y el ProfileViewModel objeto. Esto se lo conoce como resolucion.

Finalmente, la aplicacion dejara de usar el ProfileViewModel objeto y este quedara disponible para la recoleccion de elementos no utilizados. En este punto, el reconector de elementos no utilizados debe desechar cualquier implementacion de interfaz de corta duracion si otras clases no comparten la misma instancia.

--------------------------------

Dependency injection is a specialized version of the Inversion of Control (IoC) pattern, where the concern being inverted is the process of obtaining the required dependency. With dependency injection, another class is responsible for injecting dependencies into an object at runtime. 

The ProfileViewModel constructor receives multiple interface object instances as arguments injected by another class. The only dependency in the ProfileViewModel class is on the interface types.Therefore, the ProfileViewModel class doesn't have any knowledge of the class that's responsible fro instantiating the interface objects, and inserting it into the ProfileViewModel class, 
known as the dependency injection container.

Dependency injection containers reduce the coupling between onjects providing a facility to instanciate class instanes and manage their lifetime based on the configuration of the container. During object creation, the container injects any dependencies that the objects requires into it. if those dependencies have not yet been created, the container createes and resolves their dependencies first.

There are several advantages to using a dependency injection container:

*** A container removes the need for a class to locate its dependencies and manage its lifetimes.

*** A container allows the mapping of implemented dependecies without affecting the class.

*** A container facilitates testability by allowing dependencies to be mocked.

*** A container increases maintainability by allowing new classes to be easily maintainability by allowing new classes to be easilty added to the app.

In the context of a .NET MAUI app that uses MVVM, a dependency injection container will typically be used for registering and resolving views, registering and resolvig view models, and for registering services and injecting them into view models.

There are many dependency injection containers available in .NET; the eShop multi-platform app uses Microsoft.Extensions.DependencyInjection to manage the instantiation of views, view models, and service classes in the app. Microsoft.Extensions.DependencyInjection facilitates building loosely coupled apps, and provides all of the features commonly found in dependency injection containers, including methods to register the mappings and object instances,
resolve objects, manage object lifetimes, and inject dependent objects into constructors of objects that it resolves.

In .NET MAUI, the MauiProgram class will call into the CreateMauiApp method to create a MauiAppBuilder object. The MauiAppBuilder object has a Services property of type IserviceCollection, wich provides a place to register our components, such as views, view models, and services for dependency injection. Any components registered with the Services property will be provided to the dependency injection container when the MauiAppBuilder.Build method is called.

At runtime, the container must know wich implementation of the services are being requested in order to instantiate them for the requested objects. In the eShop multi-platform app, the IAppEnvironmentService, IDialogService, INavigationService, and ISettingService interfaces need to be resolved before it can instantiate a ProfileViewModel object. This involves the container performing the following actions:

*** Deciding how to instantiate an object that implements the interface. This is known as registration.

*** Instantiating the objects that implements the required interface and the ProfileViewModel object. This is known as resolution.

Eventually, the app will finish using the ProfileViewModel object, and it will become aviable for garbage colleciton. At this point, the garbage collector should dispose of any short -lived interface implementations if other classes do not share the same instance.

Registration

Before dependencies can be injected into an object, the types of the dependencies must first be registered with the container. Registering a type involves passing the container an interface and a concrete type that implements the interface.

There are two ways of registering types and objects in the container through code:

*** Register a type or mapping with the container. This is kwnon as transient registration. When required, the container will build an instance of the specified type.

*** Register an existing object in the container as a singleton. When required, the container will return a reference to the existing object.

***NOTE***
Dependency injection containers are not always suitable. Dependency injection instroduces additional complexity and requirements that migth not be appropiate or useful to small apps. If a class does not have any dependencies, or is not a dependency for other types, it migth not make sense to put in the container. In addition, if a class has a single set of dependencies that are integral to the type and will never change, it
migth not make sense to put in the container.

The registration of types requiring dependency injection should be performed in a single method in an app. This method should be invoked early in the app's lifecyrcle to ensure it is aware of the dependencies between its classes. The eShop multi-platform app performs this the MauiProgram.CreateMauiApp method. 

The MauiApp.CreateBuilder method creates a MauiAppBuilder object that we can use to register our dependencies. Many dependencies in the eShop multi-platform app need to be registered, so the extension methods RegisterAppServices, RegisterViewModels, and RegisterViews were created to help provide an organized and maintainable registration workflow.

This method receives an instance of MauiAppBuilder, and we can use the Services property to register our view models. Dependeing on the needs of your application, you may need to add services with different lifetimes. The following table provides information on when you may want to choose theses different registration lifetimes:

AddSingleton<T> - Will create a single instance of the object which will be remain for the lifetime of the application.

AddTransient<T> - Will create a new instance of the object when requested during resolution. Transient objects do not have a pre-defined lifetime, but will typically follow the lifetime of their host.

The view models do not inherit from an interface, so they onle need their concrete type provided to the AddSingleton<T> and AddTransient<T> methods.

The CatalogViewModel is used near the application's root and should always be available, so registering it with AddSingleton<T> is beneficial. Other view models, such as CheckoutViewmodel and OrderDetailViewmodel are situatiolnally navigated to or are used later in the application.
Suppose you know that you have a component that may not always be used. In that case, if is memory or computionallu intensive or requires just-in-time-data, it may be a better candidate for AddTransient<T> registration.

Another coomon way to add services is using the AddSingleton<Tservice, TImplementation> and AddTransient<TService, TImplementation> methods. These methods take two input types: the interface definition and the concrete implementation. This type of registration is best for cases where you are implementing services based on interfaces. 

Once all services have been registered, the MauiAppBuilder.Build method should be called to create our MauiApp and popilate our dependency injection container with all the registered services.

***IMPORTANT***
Once the Build method has been called, the dependency injection container is immutable and can no longer be updated or modified. Ensure that all services that you need within ypur application have been registered before you call Build.

Resolution

After a type is registered, it can be resolved on injected as a dependency. When a type is being resolved, and the container needs to create a new instance, it injects any dependencies into the instance.

Generally, when a type is resolved, one of three things happens:
1-If the type hasn't been registered, the container throws an exception.
2-If the type has been registered as a singleton, the container returns the singleton instance. If this is the first time the type is called for, the container creates it if required and maintains a reference to it.
3-If the type has been registered as transient, the container returns a new instance and doesn't maintain a reference to it.

.NET MAUI offers a number of ways to resolve registered components based on your needs. The most direct way to gain access to the dependency injection container is from an Element using the Handler.MauiContext.Services. 

This can be helpful if you need to resolve a service from within an Element or from outside of the constructor of your Element.

***CAUTION***
There is a possibility that the Handler property of your Element may be null, so be aware that you may need to handle those situations. 

If using the Shell control for .NET MAUI, it will implicitly call into the dependency injection container to create our objects during navigation. When setting up our Shell control, the Routing.RegisterRoute method will tie a route path to a View.

During Shell navigation, it will look for registrations of the FiltersView, and if any are found, it will create that view and inject any dependencies into the constructor. 

***TIP***
The dependency injection container is great for creating view model instances. If a view model has dependencies, it will handle the creation and injection of any required services. Just make sure that your register your view models and any dependencies that they
may have with the CreateMauiApp method in the MauiProgram class.

If using the Shell control for .NET MAUI, it will implicity call into the dependency injection container to create our objects during navigation. When setting up or Shell control, the Routing.RegisterRoute method will tie a route path to a View as shown in the example below:
Routing.RegisterRoute("Filter", typeof(FiltersView));

During Shell navigation, it will look for registrations of the FiltersView, and if any are found, it will create that view and inject any dependencies into the constructor. As shown in the code example below, the CatalogViewModel will be injected into the FiltersView:

namespace eShop.Views;

public partial class FiltersView : ContentPage
{
    public FiltersView(CatalogViewModel viewModel)
    {
        BindingContext = viewModel;

        InitializeComponent();
    }
}

***TIP***
The dependency injection container is great for creating view model instances. If a view model has dependencies, it will handle the creation and injection of any required services. Just make sure that you register you view models and any dependencies that they may have with the CreateMauiApp 
method in the MauiProgram class.

Summary

Dependency injection enables the decoupling of concrete types from the code that depends on these types. It typically uses a container that holds a list of registrations and mappings between interfaces and abstract types, and the concrete types that implement or extend these types.

Microsoft.Extensions.DependencyInjection facilitates building loosely coupled apps and provides all of the features commonly found in dependency injection containers, including methods to register type mappings and object instances, resolve objects, manage object lifetimes, and inject dependent objects into constructors of objects it resolves.

--------------------------------------------------------------------------

Introduccion a la inyeccion de dependencia 

La inyeccion de dependencias es una version especializada del patron Inversion de control (IoC), en el que se invierte el proceso de obtencion de la dependencia requerida. Con la inyeccion de dependencias, otra clase es responsable de inyectar dependencias en un objeto en tiempo de ejecucion. 

El ProfileViewModel constructor recibe varias instancias de objetos de interfaz como argumentos inyectados por otra clase. La unica dependencia en la ProfileViewModel clase es la de los tipos de interfaz. Por lo tanto, la ProfileViewModel clase no tiene conocimiento de la clase que es responsable de instanciar los objetos de interfaz. La clase que es responsable
de instanciar los objetos de interfaz e insertarlos en la ProfileViewModel clase se conoce como contenedor de inyeccion de dependencias.

Los contenedores de inyeccion de dependencias reducen el acoplamiento entre objetos al proporcionar una funcion para crear instancias de clases y administrar su duracion en funcion de la configuracion del contenedor. Durante la creacion de un objeto, el contenedor inyecta en el todas las dependencias que el objeto requiere. Si esas dependencias aun no se han creado, el contenedor crea y
resuelve sus dependencias primero.

** Un contendor elimina la necesidad de que una clase localice sus dependencias y administre sus duraciones de vida.

** Un contenedor permite el mapeo de dependencias implementadas sin afectar la clase.

** Un contendor facilita la capacidad de prueba al permitir simular dependencias.

** Un contenedor aumenta la capacidad de mantenimiento al permitir que se agreguen facilmente nuevas clases a la aplicacion.

En el contexto de una aplicacion .NET MAUI que utiliza MVVM, normalmente se utilizara un contenedor de inyeccion de dependencia para registrar y resolver vistas, registrar y resolver modelos de vista y para registrar servicios e inyectarlos en modelos de vista.

Hay muchos contenedores de inyeccion de dependencias disponibles en .NET; la aplicacion multiplataforma eShip utiliza Microsoft.Extensions.DependencyInjection para administrar la instalacion de vistas, modelos de vista y clases de servicio en la aplicacion.
Microsoft.Extensions.DependencyInjection facilita la creacion de aplicaciones acopladas de forma flexible y proporciona todas las caracteristicas dque se encuentran comunmente en los contenedores de inyeccion de dependencias, incluidos los metodos para registrar asignaciones de tipos e instancias de objetos, resolver objetos, administrar la duracion de los objetos e inyectar objetos dependientes en los constructores de los objetos que resuelve.

En .NET MAYU, la MauiProgram clase llamara al CreateMauiApp metodo para crear un MauiAppBuilder objeto. El MauiAppBuilder objeto tiene una Services propiedad de tipo IServiceCollection, que proporciona un lugar para registrar nuestros componentes, como vistas, modelos de vista y servicios para la inyeccion de dependencias. Todos los componentes registrados con la Services propiedad se proporcionaran al contenedor de inyeccion de dependencias cuando MauiAppBuilder se llame al metodo.

En tiempo de ejecucion, el contendor debe saber que implementacion de los servicios se estan solicitando para poder instanciarlos para los objetos solicitados. En la aplicacion multiplataforma eShop, las IAppEnviromentService interfaces IDialogService, INavigationService, y ISettingService deben resolverse antes de poder instanciar un ProfileViewModel objeto. Esto imploca que el contenedor realice las siguientes acciones:

** Decidir como insntanciar un objeto que implementa la interfaz. Esto se conoce como registro.

** Instalacion del objeto que implementa la interfaz requerida y el ProfileViewModel objeto. Esto se conoce como resolucion.

Finalmente, la aplicacion dejara de usar el ProfileViewModel objeto y este quedara disponible para la recoleecion de elementos no utilizados. En este punto, el recolector de elemtos no utilizados debe desechar cualquier implementacion de interfaz de corta duracion si otras clases no comparten la misma instancia.

Registro
Antes de poder inyectar dependencias en un objeto, primero se deben registrar los tipos de dependencias en el contenedor. Para registrar un tipo, es necesario pasarle al contenedor una interfaz y un tipo concreto que implemente la interfaz. Hay dos formas de registrar tipos y objetos en el contenedor a traves del codigo:

** Registrar un tipo o una asignacion con el contenedor. Esto se conoce como registro transitorio. Cuando sea necesario, el contenedor creara una instancia del tipo especificado.

** Registrar un objeto existente en el contenedor como singleton. Cuando sea necesario, el contenedor devolvera una referencia al objeto existente.

**NOTA** 
Los contenedores de inyeccion de dependencias no siempre son adecuados. La inyeccion de dependencias introduce complejidad y requisitos adicionales que podrian no ser apropiados o utilies para aplicaciones pequeñas. Si una clase no tiene ninguna dependencia, o no es una dependencia para otros tipos, podria no tener sentido tocarla en el contenedor.
Ademas, si una clase tiene un unico conjunto de dependencias que son parte integral del tipo y nunca cambiaran, podria no tener sentido colocarla en el contenedor.

